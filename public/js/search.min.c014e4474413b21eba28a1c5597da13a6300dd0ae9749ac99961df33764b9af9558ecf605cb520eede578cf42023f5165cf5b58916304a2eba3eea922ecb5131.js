var e,t;e=this,t=function(){"use strict";function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function r(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=s(e);if(t){var i=s(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return h(this,n)}}function l(e){return function(e){if(Array.isArray(e))return d(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?d(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function v(e){return Array.isArray?Array.isArray(e):"[object Array]"===x(e)}function g(e){return"string"==typeof e}function y(e){return"number"==typeof e}function p(e){return!0===e||!1===e||function(e){return m(e)&&null!==e}(e)&&"[object Boolean]"==x(e)}function m(t){return"object"===e(t)}function k(e){return null!=e}function M(e){return!e.trim().length}function x(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Object.prototype.toString.call(e)}var b=function(e){return"Invalid value for key ".concat(e)},L=function(e){return"Pattern length exceeds max of ".concat(e,".")},S=Object.prototype.hasOwnProperty,_=function(){function e(n){var r=this;t(this,e),this._keys=[],this._keyMap={};var i=0;n.forEach((function(e){var t=w(e);i+=t.weight,r._keys.push(t),r._keyMap[t.id]=t,i+=t.weight})),this._keys.forEach((function(e){e.weight/=i}))}return r(e,[{key:"get",value:function(e){return this._keyMap[e]}},{key:"keys",value:function(){return this._keys}},{key:"toJSON",value:function(){return JSON.stringify(this._keys)}}]),e}();function w(e){var t=null,n=null,r=null,i=1;if(g(e)||v(e))r=e,t=O(e),n=j(e);else{if(!S.call(e,"name"))throw new Error(function(e){return"Missing ".concat(e," property in key")}("name"));var o=e.name;if(r=o,S.call(e,"weight")&&(i=e.weight)<=0)throw new Error(function(e){return"Property 'weight' in key '".concat(e,"' must be a positive integer")}(o));t=O(o),n=j(o)}return{path:t,id:n,weight:i,src:r}}function O(e){return v(e)?e:e.split(".")}function j(e){return v(e)?e.join("."):e}var A=c({},{isCaseSensitive:!1,includeScore:!1,keys:[],shouldSort:!0,sortFn:function(e,t){return e.score===t.score?e.idx<t.idx?-1:1:e.score<t.score?-1:1}},{},{includeMatches:!1,findAllMatches:!1,minMatchCharLength:1},{},{location:0,threshold:.6,distance:100},{},{useExtendedSearch:!1,getFn:function(e,t){var n=[],r=!1;return function e(t,i,o){if(k(t))if(i[o]){var c=t[i[o]];if(!k(c))return;if(o===i.length-1&&(g(c)||y(c)||p(c)))n.push(function(e){return null==e?"":function(e){if("string"==typeof e)return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}(e)}(c));else if(v(c)){r=!0;for(var a=0,s=c.length;a<s;a+=1)e(c[a],i,o+1)}else i.length&&e(c,i,o+1)}else n.push(t)}(e,g(t)?t.split("."):t,0),r?n:n[0]},ignoreLocation:!1,ignoreFieldNorm:!1}),I=/[^ ]+/g;function C(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:3,t=new Map;return{get:function(n){var r=n.match(I).length;if(t.has(r))return t.get(r);var i=parseFloat((1/Math.sqrt(r)).toFixed(e));return t.set(r,i),i},clear:function(){t.clear()}}}var E=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.getFn,i=void 0===r?A.getFn:r;t(this,e),this.norm=C(3),this.getFn=i,this.isCreated=!1,this.setIndexRecords()}return r(e,[{key:"setSources",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];this.docs=e}},{key:"setIndexRecords",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];this.records=e}},{key:"setKeys",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];this.keys=t,this._keysMap={},t.forEach((function(t,n){e._keysMap[t.id]=n}))}},{key:"create",value:function(){var e=this;!this.isCreated&&this.docs.length&&(this.isCreated=!0,g(this.docs[0])?this.docs.forEach((function(t,n){e._addString(t,n)})):this.docs.forEach((function(t,n){e._addObject(t,n)})),this.norm.clear())}},{key:"add",value:function(e){var t=this.size();g(e)?this._addString(e,t):this._addObject(e,t)}},{key:"removeAt",value:function(e){this.records.splice(e,1);for(var t=e,n=this.size();t<n;t+=1)this.records[t].i-=1}},{key:"getValueForItemAtKeyId",value:function(e,t){return e[this._keysMap[t]]}},{key:"size",value:function(){return this.records.length}},{key:"_addString",value:function(e,t){if(k(e)&&!M(e)){var n={v:e,i:t,n:this.norm.get(e)};this.records.push(n)}}},{key:"_addObject",value:function(e,t){var n=this,r={i:t,$:{}};this.keys.forEach((function(t,i){var o=n.getFn(e,t.path);if(k(o))if(v(o))!function(){for(var e=[],t=[{nestedArrIndex:-1,value:o}];t.length;){var c=t.pop(),a=c.nestedArrIndex,s=c.value;if(k(s))if(g(s)&&!M(s)){var u={v:s,i:a,n:n.norm.get(s)};e.push(u)}else v(s)&&s.forEach((function(e,n){t.push({nestedArrIndex:n,value:e})}))}r.$[i]=e}();else if(!M(o)){var c={v:o,n:n.norm.get(o)};r.$[i]=c}})),this.records.push(r)}},{key:"toJSON",value:function(){return{keys:this.keys,records:this.records}}}]),e}();function $(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.getFn,i=void 0===r?A.getFn:r,o=new E({getFn:i});return o.setKeys(e.map(w)),o.setSources(t),o.create(),o}function R(e,t){var n=e.matches;t.matches=[],k(n)&&n.forEach((function(e){if(k(e.indices)&&e.indices.length){var n={indices:e.indices,value:e.value};e.key&&(n.key=e.key.src),e.idx>-1&&(n.refIndex=e.idx),t.matches.push(n)}}))}function F(e,t){t.score=e.score}function P(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.errors,r=void 0===n?0:n,i=t.currentLocation,o=void 0===i?0:i,c=t.expectedLocation,a=void 0===c?0:c,s=t.distance,u=void 0===s?A.distance:s,h=t.ignoreLocation,f=void 0===h?A.ignoreLocation:h,l=r/e.length;if(f)return l;var d=Math.abs(a-o);return u?l+d/u:d?1:l}function N(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:A.minMatchCharLength,n=[],r=-1,i=-1,o=0,c=e.length;o<c;o+=1){var a=e[o];a&&-1===r?r=o:a||-1===r||((i=o-1)-r+1>=t&&n.push([r,i]),r=-1)}return e[o-1]&&o-r>=t&&n.push([r,o-1]),n}function D(e){for(var t={},n=0,r=e.length;n<r;n+=1){var i=e.charAt(n);t[i]=(t[i]||0)|1<<r-n-1}return t}var z=function(){function e(n){var r=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=i.location,c=void 0===o?A.location:o,a=i.threshold,s=void 0===a?A.threshold:a,u=i.distance,h=void 0===u?A.distance:u,f=i.includeMatches,l=void 0===f?A.includeMatches:f,d=i.findAllMatches,v=void 0===d?A.findAllMatches:d,g=i.minMatchCharLength,y=void 0===g?A.minMatchCharLength:g,p=i.isCaseSensitive,m=void 0===p?A.isCaseSensitive:p,k=i.ignoreLocation,M=void 0===k?A.ignoreLocation:k;if(t(this,e),this.options={location:c,threshold:s,distance:h,includeMatches:l,findAllMatches:v,minMatchCharLength:y,isCaseSensitive:m,ignoreLocation:M},this.pattern=m?n:n.toLowerCase(),this.chunks=[],this.pattern.length){var x=function(e,t){r.chunks.push({pattern:e,alphabet:D(e),startIndex:t})},b=this.pattern.length;if(b>32){for(var L=0,S=b%32,_=b-S;L<_;)x(this.pattern.substr(L,32),L),L+=32;if(S){var w=b-32;x(this.pattern.substr(w),w)}}else x(this.pattern,0)}}return r(e,[{key:"searchIn",value:function(e){var t=this.options,n=t.isCaseSensitive,r=t.includeMatches;if(n||(e=e.toLowerCase()),this.pattern===e){var i={isMatch:!0,score:0};return r&&(i.indices=[[0,e.length-1]]),i}var o=this.options,c=o.location,a=o.distance,s=o.threshold,u=o.findAllMatches,h=o.minMatchCharLength,f=o.ignoreLocation,d=[],v=0,g=!1;this.chunks.forEach((function(t){var n=t.pattern,i=t.alphabet,o=t.startIndex,y=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=r.location,o=void 0===i?A.location:i,c=r.distance,a=void 0===c?A.distance:c,s=r.threshold,u=void 0===s?A.threshold:s,h=r.findAllMatches,f=void 0===h?A.findAllMatches:h,l=r.minMatchCharLength,d=void 0===l?A.minMatchCharLength:l,v=r.includeMatches,g=void 0===v?A.includeMatches:v,y=r.ignoreLocation,p=void 0===y?A.ignoreLocation:y;if(t.length>32)throw new Error(L(32));for(var m,k=t.length,M=e.length,x=Math.max(0,Math.min(o,M)),b=u,S=x,_=d>1||g,w=_?Array(M):[];(m=e.indexOf(t,S))>-1;){var O=P(t,{currentLocation:m,expectedLocation:x,distance:a,ignoreLocation:p});if(b=Math.min(O,b),S=m+k,_)for(var j=0;j<k;)w[m+j]=1,j+=1}S=-1;for(var I=[],C=1,E=k+M,$=1<<k-1,R=0;R<k;R+=1){for(var F=0,D=E;F<D;){var z=P(t,{errors:R,currentLocation:x+D,expectedLocation:x,distance:a,ignoreLocation:p});z<=b?F=D:E=D,D=Math.floor((E-F)/2+F)}E=D;var K=Math.max(1,x-D+1),q=f?M:Math.min(x+D,M)+k,W=Array(q+2);W[q+1]=(1<<R)-1;for(var J=q;J>=K;J-=1){var T=J-1,U=n[e.charAt(T)];if(_&&(w[T]=+!!U),W[J]=(W[J+1]<<1|1)&U,R&&(W[J]|=(I[J+1]|I[J])<<1|1|I[J+1]),W[J]&$&&(C=P(t,{errors:R,currentLocation:T,expectedLocation:x,distance:a,ignoreLocation:p}))<=b){if(b=C,(S=T)<=x)break;K=Math.max(1,2*x-S)}}var V=P(t,{errors:R+1,currentLocation:x,expectedLocation:x,distance:a,ignoreLocation:p});if(V>b)break;I=W}var B={isMatch:S>=0,score:Math.max(.001,C)};if(_){var G=N(w,d);G.length?g&&(B.indices=G):B.isMatch=!1}return B}(e,n,i,{location:c+o,distance:a,threshold:s,findAllMatches:u,minMatchCharLength:h,includeMatches:r,ignoreLocation:f}),p=y.isMatch,m=y.score,k=y.indices;p&&(g=!0),v+=m,p&&k&&(d=[].concat(l(d),l(k)))}));var y={isMatch:g,score:g?v/this.chunks.length:1};return g&&r&&(y.indices=d),y}}]),e}(),K=function(){function e(n){t(this,e),this.pattern=n}return r(e,[{key:"search",value:function(){}}],[{key:"isMultiMatch",value:function(e){return q(e,this.multiRegex)}},{key:"isSingleMatch",value:function(e){return q(e,this.singleRegex)}}]),e}();function q(e,t){var n=e.match(t);return n?n[1]:null}var W=function(e){a(i,e);var n=f(i);function i(e){return t(this,i),n.call(this,e)}return r(i,[{key:"search",value:function(e){var t=e===this.pattern;return{isMatch:t,score:t?0:1,indices:[0,this.pattern.length-1]}}}],[{key:"type",get:function(){return"exact"}},{key:"multiRegex",get:function(){return/^="(.*)"$/}},{key:"singleRegex",get:function(){return/^=(.*)$/}}]),i}(K),J=function(e){a(i,e);var n=f(i);function i(e){return t(this,i),n.call(this,e)}return r(i,[{key:"search",value:function(e){var t=-1===e.indexOf(this.pattern);return{isMatch:t,score:t?0:1,indices:[0,e.length-1]}}}],[{key:"type",get:function(){return"inverse-exact"}},{key:"multiRegex",get:function(){return/^!"(.*)"$/}},{key:"singleRegex",get:function(){return/^!(.*)$/}}]),i}(K),T=function(e){a(i,e);var n=f(i);function i(e){return t(this,i),n.call(this,e)}return r(i,[{key:"search",value:function(e){var t=e.startsWith(this.pattern);return{isMatch:t,score:t?0:1,indices:[0,this.pattern.length-1]}}}],[{key:"type",get:function(){return"prefix-exact"}},{key:"multiRegex",get:function(){return/^\^"(.*)"$/}},{key:"singleRegex",get:function(){return/^\^(.*)$/}}]),i}(K),U=function(e){a(i,e);var n=f(i);function i(e){return t(this,i),n.call(this,e)}return r(i,[{key:"search",value:function(e){var t=!e.startsWith(this.pattern);return{isMatch:t,score:t?0:1,indices:[0,e.length-1]}}}],[{key:"type",get:function(){return"inverse-prefix-exact"}},{key:"multiRegex",get:function(){return/^!\^"(.*)"$/}},{key:"singleRegex",get:function(){return/^!\^(.*)$/}}]),i}(K),V=function(e){a(i,e);var n=f(i);function i(e){return t(this,i),n.call(this,e)}return r(i,[{key:"search",value:function(e){var t=e.endsWith(this.pattern);return{isMatch:t,score:t?0:1,indices:[e.length-this.pattern.length,e.length-1]}}}],[{key:"type",get:function(){return"suffix-exact"}},{key:"multiRegex",get:function(){return/^"(.*)"\$$/}},{key:"singleRegex",get:function(){return/^(.*)\$$/}}]),i}(K),B=function(e){a(i,e);var n=f(i);function i(e){return t(this,i),n.call(this,e)}return r(i,[{key:"search",value:function(e){var t=!e.endsWith(this.pattern);return{isMatch:t,score:t?0:1,indices:[0,e.length-1]}}}],[{key:"type",get:function(){return"inverse-suffix-exact"}},{key:"multiRegex",get:function(){return/^!"(.*)"\$$/}},{key:"singleRegex",get:function(){return/^!(.*)\$$/}}]),i}(K),G=function(e){a(i,e);var n=f(i);function i(e){var r,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},c=o.location,a=void 0===c?A.location:c,s=o.threshold,u=void 0===s?A.threshold:s,h=o.distance,f=void 0===h?A.distance:h,l=o.includeMatches,d=void 0===l?A.includeMatches:l,v=o.findAllMatches,g=void 0===v?A.findAllMatches:v,y=o.minMatchCharLength,p=void 0===y?A.minMatchCharLength:y,m=o.isCaseSensitive,k=void 0===m?A.isCaseSensitive:m,M=o.ignoreLocation,x=void 0===M?A.ignoreLocation:M;return t(this,i),(r=n.call(this,e))._bitapSearch=new z(e,{location:a,threshold:u,distance:f,includeMatches:d,findAllMatches:g,minMatchCharLength:p,isCaseSensitive:k,ignoreLocation:x}),r}return r(i,[{key:"search",value:function(e){return this._bitapSearch.searchIn(e)}}],[{key:"type",get:function(){return"fuzzy"}},{key:"multiRegex",get:function(){return/^"(.*)"$/}},{key:"singleRegex",get:function(){return/^(.*)$/}}]),i}(K),H=function(e){a(i,e);var n=f(i);function i(e){return t(this,i),n.call(this,e)}return r(i,[{key:"search",value:function(e){for(var t,n=0,r=[],i=this.pattern.length;(t=e.indexOf(this.pattern,n))>-1;)n=t+i,r.push([t,n-1]);var o=!!r.length;return{isMatch:o,score:o?1:0,indices:r}}}],[{key:"type",get:function(){return"include"}},{key:"multiRegex",get:function(){return/^'"(.*)"$/}},{key:"singleRegex",get:function(){return/^'(.*)$/}}]),i}(K),Q=[W,H,T,U,B,V,J,G],X=Q.length,Y=/ +(?=([^\"]*\"[^\"]*\")*[^\"]*$)/;function Z(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e.split("|").map((function(e){for(var n=e.trim().split(Y).filter((function(e){return e&&!!e.trim()})),r=[],i=0,o=n.length;i<o;i+=1){for(var c=n[i],a=!1,s=-1;!a&&++s<X;){var u=Q[s],h=u.isMultiMatch(c);h&&(r.push(new u(h,t)),a=!0)}if(!a)for(s=-1;++s<X;){var f=Q[s],l=f.isSingleMatch(c);if(l){r.push(new f(l,t));break}}}return r}))}var ee=new Set([G.type,H.type]),te=function(){function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=r.isCaseSensitive,o=void 0===i?A.isCaseSensitive:i,c=r.includeMatches,a=void 0===c?A.includeMatches:c,s=r.minMatchCharLength,u=void 0===s?A.minMatchCharLength:s,h=r.ignoreLocation,f=void 0===h?A.ignoreLocation:h,l=r.findAllMatches,d=void 0===l?A.findAllMatches:l,v=r.location,g=void 0===v?A.location:v,y=r.threshold,p=void 0===y?A.threshold:y,m=r.distance,k=void 0===m?A.distance:m;t(this,e),this.query=null,this.options={isCaseSensitive:o,includeMatches:a,minMatchCharLength:u,findAllMatches:d,ignoreLocation:f,location:g,threshold:p,distance:k},this.pattern=o?n:n.toLowerCase(),this.query=Z(this.pattern,this.options)}return r(e,[{key:"searchIn",value:function(e){var t=this.query;if(!t)return{isMatch:!1,score:1};var n=this.options,r=n.includeMatches;e=n.isCaseSensitive?e:e.toLowerCase();for(var i=0,o=[],c=0,a=0,s=t.length;a<s;a+=1){var u=t[a];o.length=0,i=0;for(var h=0,f=u.length;h<f;h+=1){var d=u[h],v=d.search(e),g=v.isMatch,y=v.indices,p=v.score;if(!g){c=0,i=0,o.length=0;break}if(i+=1,c+=p,r){var m=d.constructor.type;ee.has(m)?o=[].concat(l(o),l(y)):o.push(y)}}if(i){var k={isMatch:!0,score:c/i};return r&&(k.indices=o),k}}return{isMatch:!1,score:1}}}],[{key:"condition",value:function(e,t){return t.useExtendedSearch}}]),e}(),ne=[];function re(e,t){for(var n=0,r=ne.length;n<r;n+=1){var i=ne[n];if(i.condition(e,t))return new i(e,t)}return new z(e,t)}var ie="$and",oe="$or",ce="$path",ae="$val",se=function(e){return!(!e[ie]&&!e[oe])},ue=function(e){return!!e[ce]},he=function(e){return!v(e)&&m(e)&&!se(e)},fe=function(e){return i({},ie,Object.keys(e).map((function(t){return i({},t,e[t])})))},le=function(){function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=arguments.length>2?arguments[2]:void 0;t(this,e),this.options=c({},A,{},r),this.options.useExtendedSearch,this._keyStore=new _(this.options.keys),this.setCollection(n,i)}return r(e,[{key:"setCollection",value:function(e,t){if(this._docs=e,t&&!(t instanceof E))throw new Error("Incorrect 'index' type");this._myIndex=t||$(this.options.keys,this._docs,{getFn:this.options.getFn})}},{key:"add",value:function(e){k(e)&&(this._docs.push(e),this._myIndex.add(e))}},{key:"remove",value:function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){return!1},t=[],n=0,r=this._docs.length;n<r;n+=1){var i=this._docs[n];e(i,n)&&(this.removeAt(n),n-=1,r-=1,t.push(i))}return t}},{key:"removeAt",value:function(e){this._docs.splice(e,1),this._myIndex.removeAt(e)}},{key:"getIndex",value:function(){return this._myIndex}},{key:"search",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.limit,r=void 0===n?-1:n,i=this.options,o=i.includeMatches,c=i.includeScore,a=i.shouldSort,s=i.sortFn,u=i.ignoreFieldNorm,h=g(e)?g(this._docs[0])?this._searchStringList(e):this._searchObjectList(e):this._searchLogical(e);return de(h,{ignoreFieldNorm:u}),a&&h.sort(s),y(r)&&r>-1&&(h=h.slice(0,r)),ve(h,this._docs,{includeMatches:o,includeScore:c})}},{key:"_searchStringList",value:function(e){var t=re(e,this.options),n=this._myIndex.records,r=[];return n.forEach((function(e){var n=e.v,i=e.i,o=e.n;if(k(n)){var c=t.searchIn(n),a=c.isMatch,s=c.score,u=c.indices;a&&r.push({item:n,idx:i,matches:[{score:s,value:n,norm:o,indices:u}]})}})),r}},{key:"_searchLogical",value:function(e){var t=this,n=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.auto,i=void 0===r||r,o=function e(n){var r=Object.keys(n),o=ue(n);if(!o&&r.length>1&&!se(n))return e(fe(n));if(he(n)){var c=o?n[ce]:r[0],a=o?n[ae]:n[c];if(!g(a))throw new Error(b(c));var s={keyId:j(c),pattern:a};return i&&(s.searcher=re(a,t)),s}var u={children:[],operator:r[0]};return r.forEach((function(t){var r=n[t];v(r)&&r.forEach((function(t){u.children.push(e(t))}))})),u};return se(e)||(e=fe(e)),o(e)}(e,this.options),r=this._myIndex.records,i={},o=[];return r.forEach((function(e){var r=e.$,c=e.i;if(k(r)){var a=function e(n,r,i){if(!n.children){var o=n.keyId,c=n.searcher,a=t._findMatches({key:t._keyStore.get(o),value:t._myIndex.getValueForItemAtKeyId(r,o),searcher:c});return a&&a.length?[{idx:i,item:r,matches:a}]:[]}switch(n.operator){case ie:for(var s=[],u=0,h=n.children.length;u<h;u+=1){var f=e(n.children[u],r,i);if(!f.length)return[];s.push.apply(s,l(f))}return s;case oe:for(var d=[],v=0,g=n.children.length;v<g;v+=1){var y=e(n.children[v],r,i);if(y.length){d.push.apply(d,l(y));break}}return d}}(n,r,c);a.length&&(i[c]||(i[c]={idx:c,item:r,matches:[]},o.push(i[c])),a.forEach((function(e){var t,n=e.matches;(t=i[c].matches).push.apply(t,l(n))})))}})),o}},{key:"_searchObjectList",value:function(e){var t=this,n=re(e,this.options),r=this._myIndex,i=r.keys,o=r.records,c=[];return o.forEach((function(e){var r=e.$,o=e.i;if(k(r)){var a=[];i.forEach((function(e,i){a.push.apply(a,l(t._findMatches({key:e,value:r[i],searcher:n})))})),a.length&&c.push({idx:o,item:r,matches:a})}})),c}},{key:"_findMatches",value:function(e){var t=e.key,n=e.value,r=e.searcher;if(!k(n))return[];var i=[];if(v(n))n.forEach((function(e){var n=e.v,o=e.i,c=e.n;if(k(n)){var a=r.searchIn(n),s=a.isMatch,u=a.score,h=a.indices;s&&i.push({score:u,key:t,value:n,idx:o,norm:c,indices:h})}}));else{var o=n.v,c=n.n,a=r.searchIn(o),s=a.isMatch,u=a.score,h=a.indices;s&&i.push({score:u,key:t,value:o,norm:c,indices:h})}return i}}]),e}();function de(e,t){var n=t.ignoreFieldNorm,r=void 0===n?A.ignoreFieldNorm:n;e.forEach((function(e){var t=1;e.matches.forEach((function(e){var n=e.key,i=e.norm,o=e.score,c=n?n.weight:null;t*=Math.pow(0===o&&c?Number.EPSILON:o,(c||1)*(r?1:i))})),e.score=t}))}function ve(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.includeMatches,i=void 0===r?A.includeMatches:r,o=n.includeScore,c=void 0===o?A.includeScore:o,a=[];return i&&a.push(R),c&&a.push(F),e.map((function(e){var n=e.idx,r={item:t[n],refIndex:n};return a.length&&a.forEach((function(t){t(e,r)})),r}))}return le.version="6.4.3",le.createIndex=$,le.parseIndex=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.getFn,r=void 0===n?A.getFn:n,i=e.keys,o=e.records,c=new E({getFn:r});return c.setKeys(i),c.setIndexRecords(o),c},le.config=A,function(){ne.push.apply(ne,arguments)}(te),le},"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Fuse=t();;const idx=[{"link":"http://0fd660284dee.ngrok.io/dim/courses/1-php/","title":"1 - PHP","body":"[Introduction Why ? Langage de scripting Langage Backend pour le web C'est un langage interprété Qui s'en sert ? Facebook (toujours) Wikipédia Wordpress Symfony Qui s'en sert ? Blablacar Dailymotion MindGeek (wiki) Historique Personal Home Page 1 - 1994 par Rasmus Lerdorf php 3.0 : Team PHP - 1998 &quot;PHP Hypertext Processor&quot; php 4 : 2000 -&gt; 2005 php 5.0 : 2004 php 6 : 2005 php 5.3 : 2009 php 5.6 : 2014 php 7 : 2015 php 7.4 : novembre 2019 museum.php.net Pourquoi ce cours ? Remettre tout le monde à niveau Vous mettre à jour, avant de rentrer dans le vif du sujet Outils pour ce cours PHP 7.4 avec l'extension PDO SQLite ET C'EST TOUT ! Installation Linux Ubuntu 1 2 3 4 5 6 7 8 sudo add-apt-repository ppa:ondrej/php sudo apt-get update sudo apt-get install php7.4-cli \ php7.4-xml \ php7.4-json \ php7.4-sqlite3 \ php7.4-mbstring \ php7.4-intl Mac OSX Avec Homebrew 1 2 brew update brew install php@7.4 Windows Télécharger les binaires sur windows.php.net et l'extraire le contenu dans c:/php. Faire pointer sa variable d'environement (PATH) sur C:\php ou utiliser directement en ligne de commande C:\php\php.exe Usage En ligne de commande : 1 php -v 1 2 3 4 PHP 7.4.1 (cli) (built: Dec 18 2019 14:44:22) ( NTS ) Copyright (c) The PHP Group Zend Engine v3.4.0, Copyright (c) Zend Technologies with Zend OPcache v7.4.1, Copyright (c), by Zend Technologies Démarrer un serveur local qui pointe sur un dossier public 1 php -S 0.0.0.0:8000 -t public 1 PHP 7.4.1 Development Server (http://0.0.0.0:8000) started Le serveur est disponible sur http://localhost:8000 Syntaxe de base 1 2 3 4 5 6 7 8 &lt;?php /** Syntaxe de base **/ $myVar = &#34;Hello&#34;; $myInt = 2; echo $myVar . &#34; &#34; . $myInt; $myInt = $myInt * 2; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 function addition(int $a, int $b) int{ return $a + $b; } echo addition(2,3); $addition2 = function (int $a, int $b): int { return $a + $b; }; echo $addition2(2, 3); $addition3 = fn(int $a, int $b): int =&gt; $a + $b; echo $addition3(3, 6); 1 2 3 4 include(&#34;page1.php&#34;); // OK but... require(&#34;page2.php&#34;); // OK include_once(&#34;page3.php&#34;); // NOT OK require_once(&#34;page4.php&#34;); // NOT OK Pour les inclusions il ne faut pas utiliser les &quot;once&quot; : ces fonctions ne sont pas optimisées et stockent en ram des tableaux pour se rappeler quel fichier a été inclus ou non. Include peut être utilisé mais ne va pas générer d'erreur en cas d'absence du fichier. Syntaxe Objet PHP est un langage Langage Orienté Objet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &lt;?php class Foo { } class Bar { private Foo $foo; public function __construct(Foo $foo) { $this-&gt;foo = $foo; } public function getFoo(): Foo { return $this-&gt;foo; } } Typage PHP Oui, ça existe Oui, c'est bien Non, c'est pas obligatoire Mais oui c'est mieux Ce qui peut être typé : Les arguments d'une fonction/méthode 7.0 Les valeurs de retour de fonction 7.0 Les attributs d'un objet ! 7.4 Ce qui ne peut pas être typé : Les variables Exemple de typage : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Foo{} class Bar{ private Foo $foo; public function __construct(Foo $foo){ $this-&gt;foo = $foo; } public function getFoo(): Foo { return $this-&gt;foo; } } On peut ajouter des arguments optionnels, ceux-ci pourront valoir soit le type soit null. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Foo{} class Bar{ private Foo $foo; public function __construct(?Foo $foo){ $this-&gt;foo = $foo; } public function getFoo(): ?Foo { return $this-&gt;foo; } } Namespaces Les Namespaces PHP sont arrivés en PHP version &gt;= 5.3.0. En comparaison avec le Java, un Namespace est un Package JAVA. En Java 1 2 3 4 5 6 7 8 9 10 11 package fr.larget; import java.lang.*; class Kernel{ public Kernel(){ .... } } En PHP 1 2 3 4 5 6 7 8 9 10 11 12 &lt;?php namespace App\Base; use Symfony\Component\HttpFoundation\Request; class Kernel { public function __construct(){ .... } } On peut également mettre plusieurs namespaces dans un seul fichier au besoin : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 namespace App\Model { class User{ } class Group{ } } namespace App\Controller{ class MainController{ } } On peut aussi ajouter des fonctions dans le namespace directement : 1 2 3 4 5 6 namespace App { function foo() { echo 42; } } Et on importe la fonction avec le mot-clé use function 1 2 3 4 5 use function App\foo; foo(); 1 2 3 4 5 namespace App\bar { class A{} class B{} function c(){ echo &#34;c\n&#34;; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 namespace App\foo{ use function App\bar\c; use App\bar as baz; use App\bar\A; echo baz\A::class . &#34;\n&#34;; echo A::class . &#34;\n&#34;; echo bar\B::class . &#34;\n&#34;; echo \App\bar\B::class . &#34;\n&#34;; \App\bar\c(); baz\c(); c(); } Mais les namespaces n'ont pas les mêmes propriétés que Java - Le code ne s'importe pas tout seul. Il existe un groupe de développeurs nommé PHP Framework Interop Group (PHP-FIG) qui a écrit des conventions de code nommées PSR - PHP Standards Recommendations. La plus importante de ces recommandations est la recommandation PSR-4 qui préconise de nommer ses namespaces comme ses dossiers pour en faciliter l'import, comme en java. Un exemple d'autoload respectant le principe de base du PSR-4. 1 2 3 4 5 6 7 8 9 10 11 spl_autoload_register(function ($class) { $prefix = &#39;App\\&#39;; $baseDir = __DIR__ . &#39;/src/&#39;; $len = strlen($prefix); if (strncmp($prefix, $class, $len) === 0) { $relativeClass = substr($class, $len); $file = $baseDir . str_replace(&#39;\\&#39;, &#39;/&#39;, $relativeClass).&#34;.php&#34;; if (file_exists($file)) { require $file; } } }); Avec cet autoloader, on retrouve les fichiers suivants : 1 2 3 4 \App\Controller\MainController =&gt; src/Controller/MainController.php \App\Router =&gt; src/Router.php \Foo\ =&gt; ?]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/courses/","title":"Courses","body":"[PHP Symfony]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/courses/2-http/","title":"2 - HTTP","body":"[HTTP Le protocol HTTP est un protocole de communication Client-Serveur inventé dans les années 90 pour le World-Wide-Web. La plupart des clients utilisant ce protocol sont les navigateurs web. HTTP Version 1991: 0.9 1996: 1.0 1997: 1.1 2015: 2.0 2018: 3.0 Pourquoi HTTP Simple : Les messages sont compréhensibles par les humains. Extensible : À partir de HTTP/1.0, les en-têtes HTTP permettent d'étendre facilement le protocole. De nouvelles fonctionnalités peuvent même être introduites par un simple accord entre le client et le serveur. Flux HTTP Lorsqu'un client veut communiquer avec un serveur, il réalise les étapes suivantes : Il ouvre une connexion TCP : la connexion TCP va être utilisée pour envoyer une ou plusieurs requêtes et pour recevoir une réponse. Le client peut ouvrir une nouvelle connexion, réutiliser une connexion existante ou ouvrir plusieurs connexions TCP vers le serveur. Il envoie un message HTTP : les messages HTTP (avant HTTP/2) sont lisibles par les humains. Avec HTTP/2, ces simples messages sont en-capsulés dans des trames, rendant la lecture directe impossible, mais le principe reste le même. 1 2 3 GET / HTTP/1.1 Host: developer.mozilla.org Accept-Language: fr Il lit la réponse envoyée par le serveur : 1 2 3 4 5 6 7 8 9 10 11 HTTP/1.1 200 OK Date: Sat, 09 Oct 2010 14:28:02 GMT Server: Apache Last-Modified: Tue, 01 Dec 2009 20:18:22 GMT ETag: &#34;51142bc1-7449-479b075b2891b&#34; Accept-Ranges: bytes Content-Length: 29769 Content-Type: text/html &lt;!DOCTYPE html&gt; &lt;html&gt;..... Il ferme ou réutilise la connexion pour les requêtes suivantes. Message HTTP Requete 1 2 3 4 5 6 7 POST / HTTP/1.1 Host: perdu.com User-Agent: curl/7.58.0 Accept: */* Content-Type: application/x-www-form-urlencoded username=Henri&amp;password=Henri Méthode : POST Path: / Protocol : HTTP/1.1 Headers: Host, User-Agent,Accept, Content-Type Body: Le reste Methodes GET: Récupérer une ressource HEAD: Récupérer les métadata de la ressource POST: Ajouter une ressource PUT: Écraser la ressource PATCH: Mettre à jour partiellement la ressource DELETE: Supprimer la ressource Mime-types text/plain: Texte text/html: Contenu HTML image/jpeg: image JPEG multipart/form-data: Form post avec fichier application/x-www-form-urlencoded: Form post application/xml: XML application/json: JSON application/octet-stream: Flux Reponse 1 2 3 4 5 6 7 HTTP/1.1 200 OK Date: Sun, 26 Jan 2020 16:29:16 GMT Last-Modified: Thu, 02 Jun 2016 06:01:08 GMT Content-Length: 204 Content-Type: text/html &lt;html&gt;&lt;head&gt;&lt;title&gt;Vous Etes Perdu ?... Version: HTTP/1.1 Code: 200 - OK Headers: Content-Type, Content-Length… Body: le reste Code HTTP 2XX Succès 200 - OK 201 - CREATED 204 - NO CONTENT (tout s'est bien passé mais le serveur n'a pas de contenu à nous renvoyer) 3XX Redirection 301 - MOVED PERMANENTLY (la ressource a été déplacée de manière permanente) 4XX Erreur Client 400 - BAD REQUEST 401 - UNAUTHORIZED 403 - FORBIDDEN 404 - NOT FOUND 405 - METHOD NOT ALLOWED 409 - CONFLICT 418 - I'M A TEAPOT (la ressource demandée est une téillère et non une caftière) 5XX Erreur Serveur 500 - INTERNAL SERVER ERROR (générique) 501 - NOT IMPLEMENTED iana.org - HTTP Status Codes]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/courses/3-composer/","title":"3 - Composer","body":"[Composer Composer est un gestionnaire de packets PHP créé en 2012. Venant remplacer directement 🕸️PEAR, Composer est aujourd'hui le plus utilisé. On peut retrouver la liste des packets sur Packagist.org Un packet, c'est une bibliothèque de code écrite par des développeurs pour répondre à un besoin, faire gagner du temps, apporter quelque chose à la communauté. Par ailleurs, Composer intègre des fonctions d'autoload qui respectent les standards PSR-4. On verra leur utilisation dans la suite du cours. Installation de Composer Composer peut être installé dans un dossier local en suivant les instructions suivantes : 1 2 3 4 5 php -r &#34;copy(&#39;https://getcomposer.org/installer&#39;, &#39;composer-setup.php&#39;);&#34; mkdir bin php composer-setup.php --install-dir=bin --filename=composer chmod a+x bin/composer rm composer-setup.php Toutes les commandes Composer peuvent ainsi être saisie en tapant : 1 php bin/console composer COMMAND php bin/composer -V La version actuelle est la version 1.9]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/courses/4-http_foundation/","title":"4 - HTTP Foundation","body":"[Symfony/HTTP-Foundation Symfony est une suite de composants qui a pour but de repondre aux besoins des developpeurs et ajouter une couche d'abstraction au langage PHP. En PHP on peut accéder aux différentes données d'une requête en utilisant la variable $GLOBALS et ses filles $_GET, $_POST, $_SERVER, $_SERVER, $_FILES, $_ENV, $_SESSION, $_COOKIE Le problème de l'usage de ces variables, c'est le fait que ça rend le code vite illisible et non-réutilisable. Symfony a créé une bibliothèque d'objets permettant de manipuler le protocole HTTP de manière propre. Cette bibliothèque appelée HttpFoundation est au coeur de TOUS les frameworks PHP modernes. Request La classe Request est le lien direct avec toutes les variables de $GLOBALS. Un lien direct est fait avec des classes de type ParameterBag, et ainsi : PHP $request $_GET $request-&gt;query $_POST $request-&gt;request $_FILES $request-&gt;files $_COOKIES $request-&gt;cookies $_SERVER $request-&gt;server&amp; $request-&gt;headers Voici quelques exemples d'usage : 1 2 3 4 5 if(isset($_GET[&#34;id&#34;])){ $id = $_GET[&#34;id&#34;]; }else{ $id = 42; } 1 2 3 use Symfony\Component\HttpFoundation\Request; $request = Request::createFromGlobals(); $id = $request-&gt;query-&gt;get(&#34;id&#34;,42); 1 2 3 4 $name = &#34;&#34;; if(isset($_POST[&#34;name&#34;])){ $name = $_POST[&#34;name&#34;]; } 1 $name = $request-&gt;request-&gt;get(&#34;name&#34;,&#34;&#34;); 1 2 3 if(isset($_POST[&#34;submit&#34;])){ } 1 2 3 if($request-&gt;request-&gt;has(&#34;submit&#34;)){ } Response La classe Response est une classe qui permet de réaliser une réponse HTTP tout en évitant de faire des appels aux fonctions header et autres du php. En pratique : 1 echo &#34;hello world&#34;; 1 2 3 4 use \Symfony\Component\HttpFoundation\Response; $response = new Response(&#34;hello world!&#34;); $response-&gt;send(); Renvoyer une page d'erreur : 1 2 3 header(&#34;HTTP/1.0 404 Not Found&#34;); echo &#34;Page not found!&#34;; 1 2 $response = new Response(&#34;Page not found!&#34;, Response::HTTP_NOT_FOUND); $response-&gt;send(); Redirection : 1 header(&#34;Location: /login&#34;); 1 2 3 4 use \Symfony\Component\HttpFoundation\RedirectResponse; $response = new RedirectResponse(&#34;/login&#34;); $response-&gt;send(); Réponse JSON : 1 2 3 header(&#39;Content-Type: application/json&#39;); echo json_encode([&#39;key&#39; =&gt; &#39;value&#39;]); 1 2 3 4 use \Symfony\Component\HttpFoundation\JsonResponse; $response = new JsonResponse([&#34;key&#34;=&gt;&#34;value&#34;]); $response-&gt;send(); Forcer le téléchargement d'un fichier : 1 2 3 4 5 6 7 8 9 header(&#39;Content-Description: File Transfer&#39;); header(&#39;Content-Type: text/plain&#39;); header(&#39;Content-Disposition: inline; filename=file.txt&#39;); header(&#39;Content-Transfer-Encoding: binary&#39;); header(&#39;Expires: 0&#39;); header(&#39;Cache-Control: must-revalidate&#39;); header(&#39;Pragma: public&#39;); header(&#39;Content-Length: &#39; . filesize($filePath)); readfile(&#34;file.txt&#34;); 1 2 3 4 5 6 7 use Symfony\Component\HttpFoundation\BinaryFileResponse; use Symfony\Component\HttpFoundation\ResponseHeaderBag; $response = new BinaryFileResponse(&#34;file.txt&#34;); $response-&gt;setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT); return $response;]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/courses/5-annotations/","title":"5 - Annotations","body":"[Annotations En programmation, une annotation est un élément permettant d'ajouter des méta-données à un code source. En PHP, les annotations sont sur les classes, les méthodes, et les attributs Know the difference :warning: 1 2 3 4 /* * Je suis un commentaire */ private $property; 1 2 3 4 /** * Je suis un commentaire d&#39; annotation */ private $property; En PHP les annotations ne sont pas supportées par défaut dans le langage, on utilise en général une bibliothèque prévue pour cela. Une annotation commence par un @ suivi du nom d'une classe. Si la classe est dans un namespace, il faut mettre un use classique dans la classe ou utiliser le chemin de déclaration complet. exemple : 1 2 3 4 5 6 7 8 use Doctrine\ORM\Mapping as ORM; /** * @Doctrine\ORM\Mapping\Entity() * @ORM\Table(name=&#34;mytable&#34;) */ class MyEntity{ } Une annotation de classe : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 /** * * Annotation sans argument : * @Foo() * * Annotation avec son argument principal : * * @Bar(&#34;arg1&#34;) * * Annotation avec une suite d&#39;arguments : * * @Person(name=&#34;henri&#34;, age=27, hair=null) */ class MaClass{ ... Annotation de méthodes : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 /** * * Annotation sans argument : * @Foo() * * Annotation avec son argument principal : * * @Bar(&#34;arg1&#34;) * * Annotation avec une suite d&#39;arguments : * * @Person(name=&#34;henri&#34;, age=27, hair=null) */ public function maFonction() { ... Annotation de propriété : 1 2 3 4 5 6 7 8 /** * * @Foo() * @Bar(&#34;arg1&#34;) * @Person(name=&#34;henri&#34;, age=27, hair=null) */ private $property; À quoi ça sert ? les routes dans Symfony sont déclarées en annotation les validateurs de formulaire la déclaration des entity]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/evaluation/","title":"Evaluations","body":"[TP Chaque TP devra être remis sur GIT avant la scéance de cours d'après. Ces TP permettront d'obtenir jusqu'à 3 points bonus sur la note du QCM. QCM Un questionnaire sera fourni reprennant tous les concepts abordés en cours. Projet L'objectif de ce projet est la mise en pratique des différents acquis de la formation symfony au travers d'un projet d'équipe qui permettra de manipuler les différents concepts. Modalité de réalisation Projet a réaliser en équipe de 3 personnes maximum. Contraintes du projet Avoir un minimum de 4 Tables Avoir une relation de hiérarchie dans une table avec elle-même (par exemple : Un utilisateur à un superieur hiérarchique, et ce superieur hiérarchique peut avoir un superieur également... ) Ne pas utiliser api Platform. Proposer une fonctionnalité innovante : Ce point sera utilisé pour mettre en avant &quot;pourquoi cette plateforme et pas X (X - insérer le nom d'un concurrent déjà existant)&quot; Modalité d'évaluation 1 note Collective sera fournie. La note pourra être revue en fonction de l'implication de chacun, mais uniquement sur demande des étudiants du groupe. Critères d'évaluation du projet Qualité de la documentation Un README.md propre, et utile, avec les informations indispensables du projet : ce README devra être rédigé en Markdown. Explication de la fonctionnalité innovante - en quoi est-ce innovant. Fonctionnalités CRUD sur les entités sans Easyadmin Gestion de la relation de Hiérarchie (ex : Category peut contenir une Category parente) Sécurité et authentification Qualité du code Qualité du code Respect des bonnes pratiques du framework Respect du modèle MVC Respect du principe de Services Déploiement Mise en ligne du site et déploiement. Le site doit être accessible depuis l'extérieur. Gestion de projet Répartition des tâches (implication de chaque membres) Qualité des messages de commit (donc pas de titi/toto/tata) Rendu Le rendu se fera via git, sur la plateforme Github . L'utilisateur @decima devra être invité dans chacun de vos projets pour permettre l'accès aux différents rendus et historique de travail du projet. Aucun travail ne sera évalué en dehors de la plateforme git et de la plateforme testée en ligne. Date limite de rendu : 1er Mai à 23:59 Tous les commits après cette date ne seront pas pris en compte]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/courses/6-doctrine/","title":"6 - Doctrine","body":"[Doctrine-Project est une suite de bibliothèques dont la fonction première est la manipulation de données de base de données. On distingue 2 projets Doctrine : Doctrine DBAL (DataBase Abstraction Layer) et Doctrine ORM (Object Relational Mapper). Qu'est-ce qu'un ORM ? Un mapping objet-relationnel (en anglais object-relational mapping ou ORM) est un type de programme informatique qui se place en interface entre un programme applicatif et une base de données relationnelle pour simuler une base de données orientée objet. Ce programme définit des correspondances entre les schémas de la base de données et les classes du programme applicatif. On pourrait le désigner par là, « comme une couche d'abstraction entre le monde objet et monde relationnel». Entities Les entités Doctrine se déclarent par des annotations apportées à même le code. L'entité est une classe qui, une fois instanciée, représente une entrée dans la base de données. Prenons par exemple la classe Trainer. Les conventions de nommage nous dit de stocker l'entité dans un dossier Entity. Pour la suite, imaginons que les propriétés ont toutes des getters/setters déclarés. Id n'a pas de setter. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class Trainer { private $id; private $name; private $badgeCount = 0; private $startedOn; public function getId(): int { return $this-&gt;id; } public function getName(): string { return $this-&gt;name; } public function setName(string $name): void { $this-&gt;name = $name; } public function getBadgeCount(): int { return $this-&gt;badgeCount; } public function setBadgeCount(int $badgeCount): void { $this-&gt;badgeCount = $badgeCount; } public function getStartedOn(): \DateTime { return $this-&gt;startedOn; } public function setStartedOn(\DateTime $startedOn): void { $this-&gt;startedOn = $startedOn; } } avec les annotations pour déclarer la classe comme entité 1 2 3 4 5 6 7 8 9 10 11 12 13 use Doctrine\ORM\Mapping as ORM; /** * On déclare la classe comme entity : * @ORM\Entity() * * On définit le nom de sa table : * @ORM\Table(name=&#34;trainers&#34;) * */ class Trainer{ .... Puis sur le champs Id qui sera celui qui s'auto-incrémentera et sera primaire : 1 2 3 4 5 6 7 8 9 10 11 12 13 ... class Trainer{ /** * // Le champ sera une clé primaire * @ORM\Id() * // Le champ sera de type int * @ORM\Column(type=&#34;integer&#34;) * // Le champ sera une valeur auto-générée (autoincrement) * @ORM\GeneratedValue() */ private $id; ... Puis sur chacun des champs on ajoutera : 1 2 3 4 /** * @ORM\Column(type=&#34;string&#34;, length=50, nullable=false) */ private $name; Le type string a pour length par défaut 50, et le champs nullable est toujours à false. 1 2 3 4 /** * @ORM\Column(type=&#34;integer&#34;) */ private $badgeCount = 0; 1 2 3 4 5 /** * @var \DateTime * @ORM\Column(type=&#34;datetime&#34;) */ private $startedOn; En executant la requête de création/mise à jour du schéma de la base (dans cet exemple PostgreSQL), on obtient le code suivant : 1 2 3 4 5 6 7 8 9 10 11 CREATE TABLE trainers ( id INT NOT NULL, name VARCHAR(50) NOT NULL, badgeCount INT DEFAULT NULL, startedOn TIMESTAMP(0) WITHOUT TIME ZONE NOT NULL, PRIMARY KEY(id) ); CREATE SEQUENCE trainers_id_seq INCREMENT BY 1 MINVALUE 1 START 1; Si on souhaite supprimer une table, il suffit de supprimer son entité et de détacher les différents liens avec la table en question. Typage des colonnes Une liste des types non exhaustive que l'on peut utiliser en temps que type de colonne : integer string text date datetime float array json Relation Avant de continuer dans l'explication, créons une entité Pokemon avec ses getters/setters : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 use Doctrine\ORM\Mapping as ORM; /** * @ORM\Entity() * @ORM\Table(name=&#34;pokemons&#34;) */ class Pokemon { /** * @ORM\Id() * @ORM\Column(type=&#34;integer&#34;, unique=true, nullable=false) */ private $id; /** * @ORM\Column(type=&#34;string&#34;) */ private $name; .... } Dans cet exemple simple, on va partir du principe qu'un dresseur a enregistré un ou plusieurs Pokemons dans le pokedex, mais qu'un pokemon n'a été enregistré que par un seul dresseur. Dans la class Pokemon, nous allons ajouter un champs suivant qui s'appellera registrar : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 /** * // Nous faisons une relation Many(Pokemon) To One(Trainer) * @var Trainer * @ORM\ManyToOne(targetEntity=&#34;Trainer&#34;, inversedBy=&#34;registrations&#34;) */ private $registrar; public function getRegistrar(): Trainer { return $this-&gt;registrar; } public function setRegistrar(Trainer $registrar): void { $this-&gt;registrar = $registrar; } A partir de maintenant, nous ne travaillons pas avec des Id mais uniquement avec des entités : si on récupère un pokemon, en appelant la méthode getRegistrar, on obtiendra un objet de type Trainer. Du coté de la classe Trainer, on ajoute le champs suivant : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /** * @var ArrayCollection * @ORM\OneToMany(targetEntity=&#34;Pokemon&#34;, mappedBy=&#34;registrar&#34;) */ private $registrations; public function __construct() { $this-&gt;registrations=new \Doctrine\Common\Collections\ArrayCollection(); } public function register(Pokemon $pokemon) { $this-&gt;registrations[] = $pokemon; } public function getRegistrations() { return $this-&gt;registrations; } En executant la mise à jour de la base, les requêtes executées sont les suivante : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 CREATE TABLE pokemons ( id INT NOT NULL, registrar_id INT DEFAULT NULL, name VARCHAR(255) NOT NULL, PRIMARY KEY(id) ); CREATE INDEX IDX_3FD8B03DD1AA2FC1 ON pokemons (registrar_id); ALTER TABLE pokemons ADD CONSTRAINT FK_3FD8B03DD1AA2FC1 FOREIGN KEY (registrar_id) REFERENCES trainers (id) NOT DEFERRABLE INITIALLY IMMEDIATE; En continuant sur cet example on dira qu'un dresseur souhaite capturer plusieurs pokemons, que les pokemons peuvent être traqués par plusieurs personnes. On rajoute dans l'entité trainer : 1 2 3 4 5 /** * @var ArrayCollection * @ORM\ManyToMany(targetEntity=&#34;Pokemon&#34;,inversedBy=&#34;hunters&#34;) */ private $targets; et dans pokemon : 1 2 3 4 5 /** * @var ArrayCollection * @ORM\ManyToMany(targetEntity=&#34;Trainer&#34;,mappedBy=&#34;targets&#34;) */ private $hunters; Une fois le SQL executé on retrouve : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 CREATE TABLE trainer_pokemon ( trainer_id INT NOT NULL, pokemon_id INT NOT NULL, PRIMARY KEY(trainer_id, pokemon_id) ); CREATE INDEX IDX_AEE3A93CFB08EDF6 ON trainer_pokemon (trainer_id); CREATE INDEX IDX_AEE3A93C2FE71C3E ON trainer_pokemon (pokemon_id); ALTER TABLE trainer_pokemon ADD CONSTRAINT FK_AEE3A93CFB08EDF6 FOREIGN KEY (trainer_id) REFERENCES trainers (id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE; ALTER TABLE trainer_pokemon ADD CONSTRAINT FK_AEE3A93C2FE71C3E FOREIGN KEY (pokemon_id) REFERENCES pokemons (id) ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE; On parle des objets et de leurs relations entre eux. et non de tables et d'entrées. C'est la puissance de l'ORM. Par exemple : 1 2 3 4 5 $trainer = new Trainer(); $trainer-&gt;setName(&#34;Henri&#34;); $trainer-&gt;setBadgeCount(0); $trainer-&gt;startedOn(new \DateTime()); 1 2 3 4 $pokemon = new Pokemon(); $pokemon-&gt;setId(7); $pokemon-&gt;setName(&#34;Squirtle&#34;); $pokemon-&gt;setRegistrar($trainer); 1 $pokemons = $trainer-&gt;getTargets(); Entity Manipulation La manipulation des entités se fait via l'entityManager Doctrine\ORM\EntityManagerInterface. Cet objet a 4 méthodes indispensables : persist($entity) remove($entity) flush() getRepository($entityClassName) Nous aborderons juste après ces différentes méthodes. Data Loading Un Repository est une classe liée directement au modèle. Dans les conventions de code, elle se nom EntityRepository et se trouve dans un dossier Entity. Pour lier une entitée à un Repository il faut modifier l'annotation Entity ajoutée à l'entité et rajouter la propriété repositoryClass=&quot;\App\Repository\EntityRepository&quot; 1 2 3 4 /** * @ORM\Entity(repositoryClass=&#34;App\Repository\PokemonRepository&#34;) * ... */ et le Repository doit hériter de Doctrine\ORM\EntityRepository 1 2 3 4 5 6 7 8 9 10 namespace App\Repository; use Doctrine\ORM\EntityRepository; class PokemonRepository extends EntityRepository { }; Une fois le lien fait entre entité et repository, on peut récupérer le répository de cette manière : 1 2 $repository = $entityManager-&gt;getRepository(Pokemon::class); Cette classe offre plusieurs méthodes de récupération : 1 2 3 4 5 6 7 8 $repository-&gt;findAll(); //renvoie toute la table $repository-&gt;find($id); //récupère l&#39;entité par id $repository-&gt;findBy([&#34;field&#34;=&gt;&#34;value&#34;]); //récupère des entités par un ou plusieurs champs. $repository-&gt;findOneBy([&#34;field&#34;=&gt;&#34;value&#34;]); //récupère une entité par un ou plusieurs champs. Par exemple : 1 $pokemon = $repository-&gt;findBy([&#34;nom&#34;=&gt;&#34;Charizard&#34;]); pour plus de souplesse, on peut définir nos propres méthodes dans le Repository et utiliser le query Builder - Dans les rares cas où les fonctions de base ne suffisent pas. Par exemple, trouver les potentiels intéressés pour un échange avec le dresseur qui a enregistré un pokemon. 1 2 3 4 5 6 7 8 9 10 public function getTradingInteresedTrainers(Trainer $trainer) { $qb = $this-&gt;createQueryBuilder(&#34;trainer&#34;); $query = $qb-&gt;join(&#34;trainer.targets&#34;, &#34;targets&#34;) -&gt;join(&#34;targets.registrar&#34;, &#34;registrar&#34;) -&gt;where(&#34;registrar = :trainer&#34;) -&gt;setParameter(&#34;trainer&#34;, $trainer) -&gt;getQuery(); return $query-&gt;getResult(); } Edit Pour modifier une entité, il faut la récupérer du modèle et après la modifier naturellement. 1 2 3 4 5 $pokemonRepository = $entityManager-&gt;getRepository(Pokemon::class); $pokemon = $pokemonRepository-&gt;find(124); $pokemon-&gt;setName(&#34;Nicki Minaj&#34;); L'objet a été modifié dans le modèle Doctrine mais n'est pas enregistré en base. Add Lors de la création d'un objet de type Entity, cet objet n'est aucunement lié au modèle. La méthode de liaison est la méthode persist(). 1 2 3 4 $trainer = new Trainer(); $trainer-&gt;setName(&#34;Henri&#34;); $trainer-&gt;setStartedOn(new \DateTime()); $entityManager-&gt;persist($trainer); L'objet est maintenant lié au modèle Doctrine mais n'est pas enregistré en base. Delete Pour supprimer une entité, il faut la récupérer puis dire à l'entity manager de la supprimer. 1 2 3 4 5 $pokemonRepository = $entityManager-&gt;getRepository(Pokemon::class); $pokemon = $pokemonRepository-&gt;find(582); $entityManager-&gt;remove($pokemon); L'objet a été marqué comme à supprimer dans le modèle Doctrine mais n'est pas enregistré en base. Apply changes Une fois les changements effectués sur les entités, il faut appliquer ses modifications, en appelant la méthode : 1 $entityManager-&gt;flush();]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/courses/7-twig/","title":"7 - Twig","body":"[Templating Un Template est un fichier texte qui permet de générer n'importe quel format de fichier texte (HTML, XML, CSV, LaTeX...). Le PHP est le format le plus populaire pour faire du templating - en utilisant la syntaxe alternative : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;?= $title ?&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;List Of Users&lt;/h1&gt; &lt;table&gt; &lt;?php foreach($users as $user): ?&gt; &lt;tr&gt; &lt;td&gt;&lt;?= $user-&gt;getId();?&gt;&lt;/td&gt; &lt;td&gt;&lt;?= $user-&gt;getName();?&gt;&lt;/td&gt; &lt;/tr&gt; &lt;?php endforeach;?&gt; &lt;/body&gt; &lt;/html&gt; Twig Twig est un moteur de templating moderne pour PHP développé par Symfony. Rapide avec son système de cache Sécurisé avec son contenu encodé Moderne avec sa syntaxe courante, concise et flexible Voici le même code que vu précédemment avec twig : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;{{ title }}&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;List Of Users&lt;/h1&gt; &lt;table&gt; {% for user in users %}&lt;tr&gt; &lt;td&gt;{{ user.id }}&lt;/td&gt; &lt;td&gt;{{ user.name }}&lt;/td&gt; &lt;/tr&gt; {% endfor %}&lt;/body&gt; &lt;/html&gt; La vraie différence se retrouve là : 1 2 3 4 5 //PHP &lt;?php echo htmlspecialchars($variables, ENT_QUOTES,&#39;UTF-8&#39;); ?&gt; //Twig {{ variable }} Syntaxe de base 1 2 3 {# ...Ici un commentaire ... #}{% ...faire quelquechose ... %} {{ ...afficher quelquechose... }} Filtres Les filtres appliquent des transformations aux variables, voici des exemple de d'usage : 1 2 3 4 5 6 7 {{ post.createdAt|date(&#39;d/m/y&#39;) }}{{ post.title|lower }}{{ post.title|upper }}{{ post.title|capitalize }}{{ post.title|title }}{{ post.tags|sort|join(&#39;, &#39;) }}{{ post.author|default(&#39;anon.&#39;) }} Functions Les fonctions Twig peuvent générer ou extraire des valeurs ou des listes de valeurs : 1 2 {{ min(1, 3, 2) }}{{ random([&#39;apple&#39;, &#39;orange&#39;, &#39;citrus&#39;]) }} Controle Structures Les structures de contrôle se limitent à 4 mots clés : 1 if, else, elseif, for exemple d'usage: 1 2 3 4 5 6 7 {% if product.stock &gt; 10 %}available {% elseif product.stock &gt; 0 %}only {{ product.stock }}left! {% else %}Sold-out! {% endif %} Boucles avec la syntaxe for else: 1 2 3 4 5 6 {% for post in posts if post.active %}&lt;h2&gt;{{ post.title }}&lt;/h2&gt; {{ post.body }}{% else %}No published posts yet. {% endfor %} Operateur de comparaison 1 2 3 4 5 == != &lt; &gt; &lt;= &gt;= starts with ends with matches not https://twig.symfony.com/doc/3.x/templates.html#expressions Inclusion L'inclusion permet d'intégrer une page dans une autre de la manière suivante : 1 2 {{ include(&#34;menu.html.twig&#34;) }} Heritage L'une des fonctionnalités les plus performante de Twig est l'héritage de templates; Cela permet de réaliser une base &quot;skeleton&quot; qui contiendra tous les éléments de votre site et définir des blocks que les templates enfants pour venir modifier : Voici un exemple squelette base.html.twig de notre site : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; {% block head %}&lt;link rel=&#34;stylesheet&#34; href=&#34;style.css&#34; /&gt; &lt;title&gt;{% block title %}{% endblock %}- My Webpage&lt;/title&gt; {% endblock %}&lt;/head&gt; &lt;body&gt; &lt;div id=&#34;content&#34;&gt;{% block content %}{% endblock %}&lt;/div&gt; &lt;div id=&#34;footer&#34;&gt; {% block footer %}&amp;copy; Copyright 2011 by &lt;a href=&#34;http://domain.invalid/&#34;&gt;you&lt;/a&gt;. {% endblock %}&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; De cette manière on peut étendre le fichier de base de la manière suivante : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 {% extends &#34;base.html&#34; %}{% block title %}Index{% endblock %}{% block head %}{{ parent() }}{# parent va reprendre le contenu du bloc du parent pour l&#39;ajouter à l&#39;endroit voulu dans le bloc enfant #}&lt;style type=&#34;text/css&#34;&gt; .important { color: #336699; } &lt;/style&gt; {% endblock %}{% block content %}&lt;h1&gt;Index&lt;/h1&gt; &lt;p class=&#34;important&#34;&gt; Welcome to my awesome homepage. &lt;/p&gt; {% endblock %} Ressources Documentation Twig Installation de Twig Twig usage]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/courses/8-router/","title":"8 - Router","body":"[Un Router est un composant important qui a pour but de rediriger les requêtes HTTP entrantes vers les services requis. Au début du Web, plusieurs sites appliquaient leurs routeurs de la manière suivante : 1 https://shop.funko.com/product/show.php?id=24983 Cette Solution offre un usage simple mais limité du protocole HTTP et est déconseillée pour plusieurs raisons : L'utilisateur ne sait pas où il est Les moteurs de recherche ne peuvent pas garantir une bonne indexation L' objectif du routeur est donc de résoudre des url de ce type : 1 https://shop.funko.com/collections/all-products/products/pop-animation-dragon-ball-super-goku-black Ressources Documentation Composant router Documentation d'Usage du Router]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/courses/9-symfony/","title":"9 - Symfony","body":"[Symfony est un Framework MVC Requête/ Réponse Créé en 2005 par Fabien Potencier pour l'entreprise SensioLabs. Symfony -&gt; SF -&gt; Sensio Framework Symfony, c'est avant tout une série de composants utilisables indépendamment et le Framework est la glue qui les lie. Un Framework MVC standard se compose de ces différentes parties : Le protocole HTTP est un protocole de communication entre un client et un serveur. C'est un protocole de Requête/Rêponse. Un Routeur intercepte la Requête HTTP, l'envoie vers le Controleur qui correspond. Celui-ci ira communiquer avec le Modèle de données et génèrera la Vue qu'il renverra en Réponse HTTP. Dans le cas de Symfony, il n'existe pas de couche Modèle créée par le framework, celui-ci n'est donc pas MVC.]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp1/","title":"TP1","body":"[Téléchargez le fichier suivant. Pour l'exécuter, lancez la commande : php -S 0.0.0.0:8000 Rendez-vous sur localhost:8000. C'est une todo-list app, une liste des tâches. Elle stocke ses données en base et permet l'ajout de tâches, la suppression ainsi que la possibilité de cocher ces cases. Cette application est dégueulasse. L'objectif est donc de faire le ménage dans cette application. Étape 1 - Base de données On va commencer par créer un dossier qu'on va appeler model. Dans ce dossier model, on va créer 2 classes, une classe TaskRepository et une classe qui va s'appeler Database Dans la classe Database, on va créer une propriété privée statique de type PDO, un constructeur privé qui prend une chaîne de caractère en paramètres, et deux méthodes, une pour initialiser la base, et l'autre pour récupérer la propriété privée statique initialisée. Voici un exemple de ce qui est attendu : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 &lt;?php final class Database { private static ?self $instance = null; private $pdo; private function __construct($path) { $this-&gt;pdo = new PDO(&#34;sqlite:/$path&#34;); } public static function initialize($path) { if (self::$instance !== null) { throw new Exception(&#34;configuration as already been initialized&#34;); } self::$instance = new self($path); } public static function getInstance(): PDO { return self::$instance-&gt;pdo; } } C'est un singleton. Dans la classe TaskRepository, on va créer les méthodes suivantes : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 &lt;?php class TaskRepository { const TABLE = &#34;tasks&#34;; public function Initialize(){ } public function getAll(){ } public function update($id, $checked=false){ } public function add($description){ } public function delete($id){ } } En utilisant la méthode getInstance, implémenter les méthodes pour initialiser la base, récupérer toutes les tâches, les mettre à jour, en ajouter ou en supprimer. Pour vérifier si une table existe : 1 SELECT name FROM sqlite_master WHERE type=&#39;table&#39; AND name=&#39;myTable&#39; Après avoir implémenté la classe TaskRepository, il faut l'instancier dans le fichier index.php, et remplacer tous les appels SQL par l'appel de ces méthodes. 1 2 3 Database::initialize(__DIR__ . &#34;/data.db&#34;); $taskRepository = new TaskRepository(); $taskRepository-&gt;initialize(); Si tout se passe bien, le projet continuer à fonctionner sans problème. Étape 2 - Simplifier l'intégration PHP/HTML La seconde étape est de simplifier pour séparer le PHP et l'HTML. Pour cela, on va utiliser la syntaxe alternative PHP. En même temps, on va sortir le css dans un fichier style.css. Si tout se passe bien, le projet continue à fonctionner sans problème. Étape 3 - Séparer l'HTML Extraire toute la partie HTML dans un fichier appelé template.php et l'inclure au fichier index.php. À ce niveau dans le fichier index.php, il ne reste plus que le contrôle et le choix des actions. Étape 4 - Composer et réorganisation Pour cette étape, on va utiliser Composer. Installez composer et ajoutez le fichier composer.json avec le contenu suivant : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { &#34;name&#34;: &#34;henri/tp1&#34;, &#34;authors&#34;: [ { &#34;name&#34;: &#34;Henri Larget&#34;, &#34;email&#34;: &#34;henri@larget.fr&#34; } ], &#34;require&#34;: {}, &#34;autoload&#34;: { &#34;psr-4&#34;: { &#34;App\\&#34;: &#34;src/&#34; } } } Créez un dossier src et déplacez le dossier model dans le dossier src. Dans les 2 fichiers du modèle, ajoutez avant la déclaration de la classe : 1 2 3 4 namespace App\model; use \PDO; use \Exception; Remplacez les inclusions par les inclusions suivantes : 1 2 3 require __DIR__ . &#34;/vendor/autoload.php&#34;; use App\model\Database; use App\model\TaskRepository; Testez l'application, et normalement c'est une erreur. Installez les dépendances composer en utilisant la commande composer install.]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp1/tp1/","title":"TP1 - Todo list","body":"[Téléchargez le fichier suivant. Pour l'exécuter, lancez la commande : php -S 0.0.0.0:8000 Rendez-vous sur localhost:8000. C'est une todo-list app, une liste des tâches. Elle stocke ses données en base et permet l'ajout de tâches, la suppression ainsi que la possibilité de cocher ces cases. Cette application est dégueulasse. L'objectif est donc de faire le ménage dans cette application. 1 - Base de donnees On va commencer par créer un dossier qu'on va appeler model. Dans ce dossier model, on va créer 2 classes, une classe TaskRepository et une classe qui va s'appeler Database Dans la classe Database, on va créer une propriété privée statique de type PDO, un constructeur privé qui prend une chaîne de caractère en paramètres, et deux méthodes, une pour initialiser la base, et l'autre pour récupérer la propriété privée statique initialisée. Voici un exemple de ce qui est attendu : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 &lt;?php final class Database { private static ?self $instance = null; private $pdo; private function __construct($path) { $this-&gt;pdo = new PDO(&#34;sqlite:/$path&#34;); } public static function initialize($path) { if (self::$instance !== null) { throw new Exception(&#34;configuration as already been initialized&#34;); } self::$instance = new self($path); } public static function getInstance(): PDO { return self::$instance-&gt;pdo; } } C'est un singleton. Dans la classe TaskRepository, on va créer les méthodes suivantes : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 &lt;?php class TaskRepository { const TABLE = &#34;tasks&#34;; public function Initialize(){ } public function getAll(){ } public function update($id, $checked=false){ } public function add($description){ } public function delete($id){ } } En utilisant la méthode getInstance, implémenter les méthodes pour initialiser la base, récupérer toutes les tâches, les mettre à jour, en ajouter ou en supprimer. Pour vérifier si une table existe : 1 SELECT name FROM sqlite_master WHERE type=&#39;table&#39; AND name=&#39;myTable&#39; Après avoir implémenté la classe TaskRepository, il faut l'instancier dans le fichier index.php, et remplacer tous les appels SQL par l'appel de ces méthodes. 1 2 3 Database::initialize(__DIR__ . &#34;/data.db&#34;); $taskRepository = new TaskRepository(); $taskRepository-&gt;initialize(); Si tout se passe bien, le projet continuer à fonctionner sans problème. 2 - Simplifier l'integration PHP/HTML La seconde étape est de simplifier pour séparer le PHP et l'HTML. Pour cela, on va utiliser la syntaxe alternative PHP. En même temps, on va sortir le css dans un fichier style.css. Si tout se passe bien, le projet continue à fonctionner sans problème. 3 - Separer l'HTML Extraire toute la partie HTML dans un fichier appelé template.php et l'inclure au fichier index.php. À ce niveau dans le fichier index.php, il ne reste plus que le contrôle et le choix des actions. 4 - Composer et reorganisation Pour cette étape, on va utiliser Composer. Installez composer et ajoutez le fichier composer.json avec le contenu suivant : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { &#34;name&#34;: &#34;henri/tp1&#34;, &#34;authors&#34;: [ { &#34;name&#34;: &#34;Henri Larget&#34;, &#34;email&#34;: &#34;henri@larget.fr&#34; } ], &#34;require&#34;: {}, &#34;autoload&#34;: { &#34;psr-4&#34;: { &#34;App\\&#34;: &#34;src/&#34; } } } Créez un dossier src et déplacez le dossier model dans le dossier src. Dans les 2 fichiers du modèle, ajoutez avant la déclaration de la classe : 1 2 3 4 namespace App\model; use \PDO; use \Exception; Remplacez les inclusions par les inclusions suivantes : 1 2 3 require __DIR__ . &#34;/vendor/autoload.php&#34;; use App\model\Database; use App\model\TaskRepository; Testez l'application, et normalement c'est une erreur. Installez les dépendances composer en utilisant la commande composer install.]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp2/","title":"TP2","body":"[PHP Symfony]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp2/1-httpfoundation/","title":"1 - Http Foundation","body":"[Initialisation du projet Maintenant que vous avez installé Composer, on va créer une structure de dossiers adaptée au projet. . ├── public │ └── index.php └── src │ └── Controller On va laisser le fichier index.php vide pour le moment. La première étape va être d'appeler la commande composer init qui va initialiser le projet Composer. Une série de questions seront posées. On peut ignorer chaque question pour le moment et passer à la suite. Le fichier composer.json a été créé. La structure de ce fichier est la suivante : 1 2 3 4 5 6 7 8 9 10 { &#34;name&#34;: &#34;henri/tp2&#34;, &#34;authors&#34;: [ { &#34;name&#34;: &#34;Henri&#34;, &#34;email&#34;: &#34;henri@larget.fr&#34; } ], &#34;require&#34;: {} } Ce fichier contient toutes les informations du projet : les dépendances require, l'autoload On va donc commencer par ajouter la totalité des bibliothèques que nous avons besoin pour notre projet, à savoir symfony/http-foundation. Pour cela, il faut juste faire composer require suivi du nom du package souhaité. On va également ajouter une dépendance au package symfony/var-dumper qui est une dépendance à utiliser en environnement de dev en modifiant la commande précédente et en ajoutant l'argument require --dev . 2 valeurs ont été ajoutées au fichier composer.json : 1 2 3 4 5 6 7 8 ... &#34;require&#34;: { &#34;symfony/http-foundation&#34;: &#34;^5.0&#34; }, &#34;require-dev&#34;: { &#34;symfony/var-dumper&#34;: &#34;^5.0&#34; } ... Dans le cas où on prendrait le fichier déjà existant, il faut faire un composer install. Le composant var-dumper offre deux fonctions pratiques pour le développement : 1 2 3 4 dump($foo); //affiche le contenu d&#39;une variable dd($foo); //affiche le contenu d&#39;une variable et arrête l&#39;execution du code La structure du dossier a changé : . ├── bin │ └── composer ├── composer.json ├── composer.lock ├── public │ └── index.php ├── src │ └── Controller └── vendor ├── autoload.php ├── bin ├── composer ... └── symfony ... Le fichier Composer.lock ainsi que le dossier vendor se sont ajoutés. Le Composer.lock est un fichier qui permet de s'assurer que les versions installées sont toujours conservées dans l'état. Le dossier vendor, quant à lui, contient un dossier bin, un fichier autoload.php ainsi que des sous dossiers organisés par sous-dossiers. Le fichier autoload est le seul fichier qu'il faudra par la suite inclure en utilisant la constante __DIR__ . &quot;/path/to/vendor/autoload.php&quot; dans notre point d'entrée, et s'occupera des différents autoloads. Notre point d'entrée de site se trouve dans le dossier public, donc il faudra faire un chemin avec __DIR__ . &quot;/../vendor/autoload.php&quot;. Pour continuer dans la configuration de Composer, nous allons mettre en place l'autoload intégré. Pour cela, on ajoute dans le fichier Composer.json à la suite des require une clé autoload qui contient : 1 2 3 4 5 &#34;autoload&#34;: { &#34;psr-4&#34;: { &#34;App\\&#34;: &#34;src/&#34; } } Cela signifie qu'à partir de maintenant, le dossier src/ est le namespace App\. pour que les changements soient pris en compte, il faut faire un composer dump-autoload qui va regénérer l'autoload. Maintenant que tout est bon, on va ajouter au fichier index.php du dossier public une première ligne de require vers le fichier autoload.php comme indiqué plus haut. De cette manière, toutes les classes écrites ensuite seront automatiquement chargées et les dépendances seront accessibles. Mon premier Controller Dans le namespace App\Controller créer une classe HomeController. Cette classe aura une méthode index, et prendra en paramètre un objet de type :Symfony\Component\HttpFoundation\Request nommé $request et renverra un objet Symfony\Component\HttpFoundation\Response qui aura pour premier argument lors de l'instanciation une chaine de caractère &quot;it works&quot;. La classe App\Kernel Créez une classe PHP dans le namespace App qui va s'appeler Kernel, qui aura un attribut privé $request et aura un constructeur, une méthode publique qui s'appellera run, deux méthodes privées function route(Request $request): Response et function parametersResolver($className, $method): array. Dans le constructeur, en utilisant les use comme vu dans les exemples précédents, on ajoutera : 1 $this-&gt;request = Request::createFromGlobals(); Dans la méthode parametersResolver, il faut ajouter le code suivant : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 //this code gives you the ability to see if a method should have a parameter //if so, set it as object or value. $reflexion = new \ReflectionMethod($className, $method); $params = $reflexion-&gt;getParameters(); $autoInject = [ Request::class =&gt; $this-&gt;request ]; $paramValues = []; foreach ($params as $param) { if ($param-&gt;hasType() &amp;&amp; isset($autoInject[$param-&gt;getType()-&gt;getName()])) { $paramValues[$param-&gt;getPosition()] = $autoInject[$param-&gt;getType()-&gt;getName()]; } else { $paramValues[$param-&gt;getPosition()] = $this-&gt;request-&gt;get($param-&gt;getName(), null); } } return $paramValues; La méthode Route : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 private function route(Request $request): Response { $defaultController = HomeController::class; //we get the route here and clean it $path = $request-&gt;getPathInfo(); $path = trim($path, &#34;/&#34;); $className = $defaultController; $method = &#34;index&#34;; if (strlen($path) &gt; 0) { // if subroute is not specified, it is merged to /index list($controller, $method) = array_merge(explode(&#34;/&#34;, $path), [&#34;index&#34;]); $className = &#34;App\\Controller\\&#34; . ucfirst($controller) . &#34;Controller&#34;; if ($className === $defaultController &amp;&amp; $method === &#34;index&#34;) { /** @todo we called index of $defaultController, make a redirection to / here WITHOUT using the header function. */ } } if (!class_exists($className) || !method_exists($className, $method)) { /** @todo return a not found response here (status code 404) */ } $resolvedArguments = $this-&gt;parametersResolver($className, $method); return call_user_func_array([new $className(), $method], $resolvedArguments); } Le comportement attendu de la route est le suivant : Route Méthode de controller appelée / HomeController index /about AboutController index /about/contact AboutController contact /home/index =&gt; / Et la méthode run : 1 2 3 $response = $this-&gt;route($this-&gt;request); $response-&gt;send(); Enfin, ajouter les bons uses. Dans le fichier public/index.php ajoutez les lignes suivantes à la suite du require : 1 2 3 4 5 ... use App\Kernel; $kernel = new Kernel(); $kernel-&gt;run(); La méthode Run de notre Kernel va s'occuper de faire la suite des opérations. Une fois tous les todos fixés, on va lancer le serveur intégré à PHP pour le développement. À la raçine du projet, il faut tapper la commande suivante : 1 php -S 0.0.0.0:8000 -t public Et aller sur http://localhost:8000/ Si tout se passe bien, &quot;le site affiche it works&quot;. Abstraction du controller Pour la suite du TP, on va créer une classe abstraite App\Controller\AbstractController. Le code de la classe abstraite est la suivante : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 namespace App\Controller; use \Symfony\Component\HttpFoundation\Response; abstract class AbstractController { public function render($templateName, $data = []) { ob_start(); foreach ($data as $k =&gt; $v) $$k = $v; // worst line ever include(__DIR__ . &#34;/../../templates/layout.php&#34;); $content = ob_get_contents(); ob_end_clean(); return new Response($content); } } Cette classe abstraite sera la base de nos controlleurs. On va également créer un dossier templates à la racine de notre projet et lui donner cet aspect : . ├── bin ├── composer.json ├── public ├── templates │ ├── home │ │ └── index.php │ └── layout.php ├── src │ └── Controller │ └── AbstractController.php └── vendor ├── autoload.php ├── bin ├── composer ... └── symfony ... Dans le fichier layout.php, on va mettre le code suivant : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&#34;utf-8&#34;/&gt; &lt;link rel=&#34;stylesheet&#34; href=&#34;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css&#34; integrity=&#34;sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS&#34; crossorigin=&#34;anonymous&#34;&gt; &lt;title&gt;Mon super Site&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;main role=&#34;main&#34;&gt; &lt;div class=&#34;container&#34;&gt; &lt;header&gt; &lt;nav class=&#34;navbar navbar-expand-md navbar-dark bg-dark&#34;&gt; &lt;a class=&#34;navbar-brand&#34; href=&#34;#&#34;&gt;My website&lt;/a&gt; &lt;button class=&#34;navbar-toggler&#34; type=&#34;button&#34; data-toggle=&#34;collapse&#34; data-target=&#34;#navbarsExampleDefault&#34; aria-controls=&#34;navbarsExampleDefault&#34; aria-expanded=&#34;false&#34; aria-label=&#34;Toggle navigation&#34;&gt; &lt;span class=&#34;navbar-toggler-icon&#34;&gt;&lt;/span&gt; &lt;/button&gt; &lt;/nav&gt; &lt;/header&gt; &lt;?php include $templateName.&#34;.php&#34;; ?&gt;&lt;/div&gt; &lt;/main&gt; &lt;footer class=&#34;container&#34;&gt; &lt;p&gt;&amp;copy; Nom Prenom 2019&lt;/p&gt; &lt;/footer&gt; &lt;script src=&#34;https://code.jquery.com/jquery-3.3.1.slim.min.js&#34; integrity=&#34;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt; &lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js&#34; integrity=&#34;sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt; &lt;script src=&#34;https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js&#34; integrity=&#34;sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k&#34; crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Dans le fichier templates/home/index.php on va ajouter : 1 &lt;h1&gt;Hello &lt;?php echo $name; ?&gt;&lt;/h1&gt; La classe App\Controller\HomeController doit étendre la classe App\Controller\AbstractController, et dans la méthode index, on met le code suivant : 1 2 3 4 5 6 return $this-&gt;render( &#34;home/index&#34;, [ &#34;name&#34;=&gt;$request-&gt;query-&gt;get(&#39;name&#39;) ] ); De cette manière, en allant sur http://localhost:8000?name=Bob vous devriez voir &quot;Hello Bob&quot;. Votre objectif maintenant est de rajouter un formulaire sur la page qui pointe vers la même page (&lt;form method=&quot;POST&quot; action=&quot;action=#&quot;&gt;) avec un champ name vide, et de récupérer la variable passée en POST dans la requête pour l'afficher sur la page. Travail à terminer et à rendre via github (invitez-moi dans votre projet github: decima)]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp2/2-doctrine/","title":"2 - Doctrine","body":"[Téléchargez le code disponible ici : tp3.zip et décompressez l'archive. Faire une nouvelle branche appelée p2 sur le projet du TP2 et mettre son code dans cette branche. Allez ensuite avec votre terminal dans le dossier en question, et avant de continuer il va falloir installer les dépendances composer. L'archive contient déjà un dossier composer mais de dossier vendor, la première étape consiste à faire php bin/composer install. Une fois les dépendances installées, vous pouvez démarrer le serveur comme au premier TP. Le code fourni correspond à la correction améliorée du sujet numéro 1 du TD et l'intégration de doctrine connecté à une base SQLite. La base sera stockée à la racine du projet, dans un fichier db.sqlite. Le sujet portera sur la manipulation d'une base de donnée de jeux, joueurs scores. Un joueur possède un jeu. Chaque joueurs peut enregistrer plusieurs scores. Un jeu peut avoir plusieurs scores d'enregistrés. On pourra ainsi suivre la progression du joueur et de son score. Creation des Entities et Repositories Contrairement à un cours de base de données classiques, nous allons commencer par créer notre modèle de données. Pour cela, nous allons créer trois classes, App\Entity\Player, App\Entity\Game et App\Entity\Score qui contiendront chacunes les champs privés listés dans le schéma ci-dessus avec leurs annotations. Dès lors que les entitées sont écrites, on va exécuter la commande qui va s'occuper de mettre à jour la base de données. 1 php bin/doctrine orm:schema-tool:update --force Implementer les fonctionnalites de la plateforme Dans les routes du controlleur, vous pouvez passer un nouveau paramètre : typé Doctrine\ORM\EntityManagerInterface comme suit: 1 2 3 4 public function index(Request $request, EntityManagerInterface $entityManager){ } Les pages sont découpées en 3 controlleurs : on veut faire un CRUD sur les jeux, les joueurs, et afficher un tableau des derniers scores avec la possibilité d'en ajouter un. La classe App\FakeData génère des fausses données. Implémentez les différentes fonctionnalités en vous basant sur ce qui a été vu lors du TP1 et du TP2. Les interfaces graphiques devront être adaptées. Aucun Entity Manager ni Repository ne doit être utilisé dans les vues, c'est le rôle des Controllers. Aller plus loin Sur la homepage, afficher un classement des jeux populaires (en fonction du nombre de scores rentrés) pour la semaine et tout temps. Ajouter le classement des joueurs dans la page du jeu Ajouter le rang du joueur pour chaque jeu sur son profil Ajouter l'affichage des scores par jeu et leur évolution par rapport à la semaine dernière]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp2/3-twig/","title":"3 - Twig","body":"[En partant du TP précédent et de la branche correspondante, créez une nouvelle branche p3 : 1 2 git checkout p2 git checkout -b p3 L'objectif est de remplacer dans le tp2 les fichiers HTML par des fichiers twig, en utilisant obligatoirement les fonctionnalités suivantes : Syntaxe for else Héritage Inclusion Filtres Le cache de notre application n'ira pas dans le dossier src mais dans un dossier à la racine du projet qui s'appellera var/cache et la totalité du dossier var ne doit pas être commit. Une fois la dépendence installée, modifiez la fonction render du AbstractController avec le code suivant : 1 2 3 4 5 6 7 8 9 10 11 public function render($templateName, $data = []): Response { $loader = new FilesystemLoader(__DIR__ . &#34;/../../templates&#34;); $twig = new Environment($loader, [ &#39;cache&#39; =&gt; __DIR__ . &#34;/../../var/cache/&#34;, &#39;debug&#39; =&gt; true, ]); return new Response($twig-&gt;render($templateName, $data)); }]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp2/4-router/","title":"4 - Router","body":"[À partir du TP précédent, créez une nouvelle branche p4. Kernel Update Pour commencer, installez les composants suivants avec composer symfony/routing doctrine/annotations doctrine/cache symfony/config symfony/framework-bundle Une fois les composants installés, on va modifier 2 fichiers du début du projet, le point d'entrée de toutes les requêtes HTTP 1 2 3 4 5 6 7 8 9 10 &lt;?php $loader = require __DIR__ . &#39;/../vendor/autoload.php&#39;; \Doctrine\Common\Annotations\AnnotationRegistry::registerLoader([$loader, &#39;loadClass&#39;]); use App\Kernel; $kernel = new Kernel(false, true); $kernel-&gt;run(); Mais on fait également évoluer le kernel de cette manière : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 &lt;?php namespace App; use App\Controller\AbstractController; use Doctrine\Common\Annotations\AnnotationReader; use Doctrine\Common\Cache\FilesystemCache; use Doctrine\ORM\EntityManager; use Doctrine\ORM\EntityManagerInterface; use Doctrine\ORM\Tools\Setup; use Symfony\Bundle\FrameworkBundle\Routing\AnnotatedRouteControllerLoader; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; use Symfony\Component\Routing\Exception\ResourceNotFoundException; use Symfony\Component\Routing\Loader\AnnotationDirectoryLoader; use Symfony\Component\Config\FileLocator; use Symfony\Component\Routing\RequestContext; use Symfony\Component\Routing\Router; class Kernel { private bool $cacheIsEnabled = true; private bool $devIsEnabled = true; private $request = null; private $entityManager = null; private ?Router $router = null; public function __construct($devIsEnabled = true, $cacheIsEnabled = false) { $this-&gt;cacheIsEnabled = $cacheIsEnabled; $this-&gt;devIsEnabled = $devIsEnabled; $this-&gt;request = Request::createFromGlobals(); $this-&gt;entityManager = $this-&gt;buildEntityManager(); } private function getDirCache() { return __DIR__ . &#34;/../var/cache&#34;; } public function run() { $this-&gt;router = new Router( new AnnotationDirectoryLoader( new FileLocator(__DIR__ . &#39;/Controller/&#39;), new AnnotatedRouteControllerLoader(new AnnotationReader()) ), __DIR__ . &#34;/Controller&#34;, $this-&gt;cacheIsEnabled ? [&#34;cache_dir&#34; =&gt; $this-&gt;getDirCache() . &#34;/router&#34;] : [] ); $response = $this-&gt;route($this-&gt;request); $response-&gt;send(); } private function buildEntityManager(): EntityManager { $config = Setup::createAnnotationMetadataConfiguration( array(__DIR__ . &#34;/Entity&#34;), $this-&gt;devIsEnabled, $this-&gt;cacheIsEnabled ? $this-&gt;getDirCache() . &#34;/proxy&#34; : null, $this-&gt;cacheIsEnabled ? new FilesystemCache($this-&gt;getDirCache() . &#34;/doctrine&#34;) : null, false ); // Create a simple &#34;default&#34; Doctrine ORM configuration for Annotations $conn = array( &#39;driver&#39; =&gt; &#39;pdo_sqlite&#39;, &#39;path&#39; =&gt; __DIR__ . &#39;/../db.sqlite&#39;, ); // obtaining the entity manager return EntityManager::create($conn, $config); } public function getEntityManager() { return $this-&gt;entityManager; } private function route(Request $request): Response { $context = new RequestContext(&#39;/&#39;); // Routing can match routes with incoming requests try { $parameters = $this-&gt;router-&gt;match($request-&gt;getPathInfo()); } catch (ResourceNotFoundException $notFoundException) { return new Response(&#34;Page Not Found&#34;, Response::HTTP_NOT_FOUND); } list($className, $method) = explode(&#34;::&#34;, $parameters[&#34;_controller&#34;]); $resolvedArguments = $this-&gt;parametersResolver($className, $method, $parameters); $controller = new $className(); if ($controller instanceof AbstractController) { $controller-&gt;setRouter($this-&gt;router); } return call_user_func_array([$controller, $method], $resolvedArguments); } private function parametersResolver($className, $method, $routerParameters = []): array { try { $reflexion = new \ReflectionMethod($className, $method); } catch (\ReflectionException $e) { return []; } $params = $reflexion-&gt;getParameters(); $autoInject = [ Request::class =&gt; $this-&gt;request, EntityManagerInterface::class =&gt; $this-&gt;entityManager, ]; $paramValues = []; foreach ($params as $param) { if ($param-&gt;hasType() &amp;&amp; isset($autoInject[$param-&gt;getType()-&gt;getName()])) { $paramValues[$param-&gt;getPosition()] = $autoInject[$param-&gt;getType()-&gt;getName()]; } else { $paramValues[$param-&gt;getPosition()] = $routerParameters[$param-&gt;getName()]; } } return $paramValues; } } Router Usage En retournant sur le site, on constate que la page ne fonctionne plus. Pourquoi le site ne fonctionne plus ? Ajouter l'annotation suivante avec les imports nécessaires sur la méthode Index du contrôleur principal 1 @Route(&#34;/&#34;,name=&#34;homepage&#34;) Rien ne se passe. Désactivez le cache. Si tout se passe bien, vous obtenez l'erreur suivante : 1 ...Uncaught Error: Call to undefined method App\Controller\HomeController::setRouter().... Que signifie cette erreur ? Trouver où cet appel est effectué, et implémentez le code pour fixer ce problème. Implémentez toutes les routes nécessaires pour résoudre les appels. Les liens ne fonctionnent plus. Résoudre les problème avec $id dans certaines méthodes - Sans modifier le contenu des controlleurs. Naming and Generation Pour résoudre le problème de lien, il faut implémenter une fonction twig nommée path et permettant d'utiliser la méthode &quot;generate&quot; du router directement de la manière suivante : 1 {{ path(&#34;game_show&#34;,{id: game.id}) }} et modifier tous les liens avec la méthode path. Enfin, ajouter une nouvelle méthode dans l'AbstractController nommée redirectToRoute qui va utiliser le Router et la méthode redirect. Remplacer toutes les redirections présentes dans les controller par cette méthode.]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp3/00-specs/","title":"Specifications Techniques","body":"[Objectif Réaliser un système de blog avec Symfony. Ce système de blog est destiné à des webzines, elle gère des auteurs qui vont écrire des articles. Les membres inscrits pourront commenter les articles mais non en écrire. Features Publier un article S'inscrire/Se connecter Consulter un article Commenter un article Permissions Il y aura un administrateur qui aura accès à un back-office de gestion des utilisateurs. L'administrateur pourra également dé-publier un article. Les auteurs pourront poster des articles et commenter d'autres. Les utilisateurs pourront se connecter et commenter les articles du site. Les visiteurs pourront regarder les articles et voir les commentaires. Wireframe Voici le Wireframe du blog L'objectif est d'implémenter les différentes parties du blog.]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp3/","title":"TP3","body":"[Objectif Réaliser un système de blog avec Symfony. Ce système de blog est destiné à des webzines, elle gère des auteurs qui vont écrire des articles. Les membres inscrits pourront commenter les articles mais non en écrire. Fonctionnalités Publier un article S'inscrire/Se connecter Consulter un article Commenter un article Permissions Il y aura un administrateur qui aura accès à un back-office de gestion des utilisateurs. L'administrateur pourra également dé-publier un article. Les auteurs pourront poster des articles et commenter d'autres. Les utilisateurs pourront se connecter et commenter les articles du site. Les visiteurs pourront regarder les articles et voir les commentaires. Wireframe Voici le Wireframe du blog L'objectif est d'implémenter les différentes parties du blog.]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp3/01-getting-started-with-symfony/","title":"Getting Started","body":"[Ce projet va se dérouler sur plusieurs scéances et aura pour objectif de réaliser un système de blog avec Symfony. Les blocs quote (ce bloc par exemple), sont des questions à répondre dans le fichier README.md de votre projet Installation du Framework Pour installer le Framework, il faut d'abord installer l'invite de commande Symfony. Cette invite de commande, disponible ici, permet de : Créer de nouveaux projets Symfony Déployer sur Symfony Cloud Lancer des serveurs PHP ... Créez un projet symfony avec la commande suivante : symfony new --full symfony_tp Cela va créer un dossier symfony_tp qui contiendra votre projet Symfony. Ce projet est également un environnement GIT pret à l'emploi. À partir de maintenant, vous commiterez directement dans le projet. Console Pour exécuter des commandes Symfony, vous avez l'utilitaire console qui se trouve dans le dossier bin. Pour l'exécuter, lancer simplement la commande bin/console Et vous aurez la liste des commandes possibles. Server Web Lancez le serveur avec la commande suivante : symfony serve Si vous allez sur l'URL fournie par la commande, vous pourrez voir :]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp3/02-doctrine/","title":"Doctrine","body":"[Modele Ressources Doctrine and Symfony Create entities En utilisant la commande make:entity, on va créer 3 entités : tooltip: le type &quot;relation&quot; permet d'être assisté pour la création de relations User (id,username, isActive, isBlocked) Post (id, content, author, createdAt, isPublished, isDeleted) Comment (id, author,content, createdAt, isDeleted) Contraintes : Post a un author qui est un User Post a des Comments User a des Posts User a des Comments Comment est attaché à un Post Comment a un author qui est User Quelles relations existent entre les entités (Many To One/Many To Many/...) ? Faire un schéma de la base de données. Connexion a la base Modifier le connecteur à la base pour qu'il utilise SQLite Expliquer ce qu'est le fichier .env Expliquer pourquoi il faut changer le connecteur à la base de données Migrations L'objectif de cette partie est de découvrir les migrations avec Symfony. Expliquer l'intérêt des migrations d'une base de données Réaliser une migration de la base de donnée et l'appliquer.]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp3/03-administration/","title":"Administration","body":"[Administration Administration dans Symfony Faire une recherche sur les différentes solutions disponibles pour l'administration dans Symfony EasyAdmin Travail préparatoire : Qu'est-ce que EasyAdmin ? Installer EasyAdmin et le configurer en suivant la documentation Officielle de EasyAdmin. Pourquoi doit-on implémenter des méthodes to string dans nos entités? Ressources Easyadmin]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp3/04-controllers/","title":"Controllers","body":"[Ressources Controllers De manière générale, les bonnes pratiques sont les suivantes : Un contrôleur ne devrait pas avoir plus de 5 méthodes Une méthode de contrôlleur ne devrait pas contenir plus de 20 lignes Implementation Implémenter les vues du blog pour la lecture seule ParamResolver Qu'est-ce que le ParamConverter ?]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp3/05-form/","title":"Form","body":"[Formulaires Ressources forms Integration dans le projet Qu'est-ce qu'un formulaire Symfony ? Créez, directement des formulaires dans le contrôleur pour gérer vos entités en utilisant la méthode du contrôleur $this-&gt;createFormBuilder..., l'afficher dans twig et gérer son contenu avec Doctrine. Quels avantages offrent l'usage d'un formulaire ? Themes de formulaires Intégrer Bootstrap dans le projet et mettez à jour vos formulaires avec les bonnes classes en conséquence. Formulaires externes Créer des classes externes pour gérer vos formulaires. Theme Custom À partir de cette étape, on va créer un thème personnalisé pour nos formulaires. thèmes de formulaire Symfony Quelles sont les différentes personalisations de formulaire qui peuvent être faites dans Symfony ?]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp3/06-security/","title":"Security","body":"[Avant-propos Documentation Symfony - Securité Définir les termes suivants : Encoder, Provider, Firewall, Access Control, Role, Voter N.B.: On n'utilisera pas FOSUserBundle car ce bundle est inutile. Qu'est-ce que FOSUserBundle ? Pourquoi ne pas l'utiliser ? La sécurité intègre le hash de mot de passe, la connexion et la gestion des autorisations. Définir les termes suivants : Argon2i, Bcrypt, Plaintext, BasicHTTP Expliquer le principe de hachage. Etat du projet À cette étape, vous avez plusieurs solutions : Solution A : recreate the entity (easy) Supprimez l'entité User et son repository et utiliser le générateur symfonymake:user. (nb: Dans ce cas, il faudra recréer les liens avec les entités Post et Comment dans le code). Prenez le temps de lire l'étape d'après qui explique beaucoup de concepts de l'entité user. Solution B : update the existing entity (advanced) Implémenter l'interface UserInterface sur votre entité User. Cette interface a plusieurs méthodes : getRoles Cette méthode doit retourner un tableau des rôles que l'utilisateur a. Un utilisateur connecté doit toujours avoir le ROLE_USER. En premier temps pour le dev, on peut imaginer la méthode suivante : 1 2 3 public function getRoles(){ return [&#34;ROLE_USER&#34;]; } Il est possible d'ajouter à l'utilisateur des rôles que l'on stockera dans la base de donnée. Pour cela, on va ajouter un nouveau champs &quot;roles&quot; dans l'entité, de type json. La valeur par défaut de ce champs doit être [] qui correspond à un tableau vide en json. On va modifier notre fonction précédente pour avoir la logique suivante : 1 2 3 public function getRoles(){ return array_merge([&#34;ROLE_USER&#34;], $this-&gt;roles); } getPassword Cette méthode doit retourner le mot de passe chiffré de l'utilisateur. Si votre entité ne contient pas de champs password, créez-en un de type string(255). N'oubliez pas de générer les migrations en conséquence. getSalt Cette méthode renvoie un salage de mot de passe. WIKI. Dans la pluspart des cas, cette méthode renvoie null car la méthode de hachage est suffisament performante. getUsername La sécurité dans symfony a besoin d'un username à stocker dans la session. Dans le cas où vous avez fait une entité avec son email, getUsername doit renvoyer son email. eraseCredentials Fonction appelée automatiquement avant enregistrement (session ou bdd) de l'utilisateur pour permettre d' effacer les trace d'un éventuel mot de passe laissé en clair dans le code. Dans notre cas, cette fonction ne fera rien. Authentification Formulaire En utilisant le générateur, créer un formulaire d'authentification. Faire un schema expliquant quelle méthode est appelée dans quel ordre dans le LoginFormAuthenticator. Définir l'objectif de chaque méthodes du fichier. Inscription Après cette étape, nous allons passer sur le formulaire d'inscription. On peut utiliser le make:registration-form de symfony. ne pas oublier de hasher le mot de passe Envoyez un email à l'utilisateur pour lui confirmer son inscription. Autorisation Roles Gérer les rôles et leur hiérarchie : ROLE_USER ROLE_AUTHOR ROLE_ADMIN Un ADMIN est un AUTHOR et un AUTHOR est un USER. Penser à modifier l'entité comme abordé plus haut en gérant les rôles en base de donnée. Access Control Gérer les accès globaux au site via l'access control. La partie administration est autorisée uniquement aux ROLE_ADMIN. La partie ajout de post est dédiée au ROLE_AUTHOR. La partie ajout de commentaire est dédiée au ROLE_USER. Mettez à jour la vue pour ne pas afficher les informations qu'une personne ne peut pas faire : Access control in templates Voters voters Définir ses propres voters, pour gérer les niveau d'édition d'un article de post. L'auteur peut éditer son article tant qu'il n'est pas published. L'auteur ne peut pas éditer un article dont il n'est pas l'auteur. Un auteur peut publier un article, tout le monde peut le voir. L'administrateur peut éditer tous les articles. L'administrateur peut dé-publier un article. Modifier twig pour intégrer la gestion des permission avec les voters.]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp3/07-services/","title":"Services","body":"[Travail preparatoire Services À quoi sert un service dans Symfony ? Avez-vous déjà utilisé des services dans ce projet ? Si oui, lesquels ? Définir les termes suivant : Dependency Injection, Service, Autowiring, Container Premier service Extraire l'envoi d'email de l'inscription et en faire un service App\Services\MailerManager qui aura une méthode confirmRegistration(User $user). Ce service aura besoin du Mailer et de Twig pour générer les templates html. Gestion d'un utilisateur Créer un service App\Services\UserAccountManager pour gérer le chiffrement des mots de passe et envoyer un email de confirmation à la création du compte. Ce service pourra également gérer une fonctionnalité de mot de passe oublié ? qui renverra un nouveau mot de passe à par email à l'utilisateur. Quelle importance a les services dans le fonctionnement de Symfony ?]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp3/08-validateurs/","title":"Validateurs","body":"[Data Validation Validateurs À quoi sert le validateur ? Dans quel contexte peut-on valider des données ? Mise en place Mettre en place les validations sur l'inscription, la publication d'un Post et les commentaires. Il faut également penser à valider l'unicité des utilisateurs.]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/tp3/09-serializer/","title":"Serializer","body":"[Avant-propos How to use serializer Serializer Quels sont les différentes parties du Serializer et à quoi servent-elles ? Implementation Ajoutez une api pour que les personnes puissent accéder au site. L'API aura plusieurs actions : Consulter la liste des auteurs de posts avec le titre de leurs posts. Consulter la liste des derniers posts. Le Top des posts. Les commentaires pour un Post. L'objectif de cette partie est de ne pas utiliser API Platform. L'api pourra renvoyer sa réponse au format json ou xml, en fonction de ce que l'utilisateur passe en paramètre dans l'URL. Get Authors and their Posts GET /api/authors.{format} AUTH-KEY: My-authentication-key 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 200 OK Content-Type: application/json [ { &#34;id&#34;: 1, &#34;username&#34;: &#34;henri&#34;, &#34;posts&#34;: [ { &#34;id&#34;:17, &#34;brief&#34;: &#34;Lorem Ipsum dolor sit amet&#34; //c&#39;est le titre, mais le concepteur de l&#39;api est une personne détestable } ] } ] Consulter la liste des derniers posts GET /api/last.{format} AUTH-KEY: My-authentication-key 1 2 3 4 5 6 7 8 9 10 11 200 OK Content-Type: application/json [ { &#34;id&#34;:17, &#34;title&#34;: &#34;Lorem Ipsum dolor sit amet&#34;, &#34;content&#34;:&#34;le contenu du post&#34;, &#34;createdAt&#34;:&#34;format:ISO8601&#34; } ] Le Top des posts GET /api/top.{format} AUTH-KEY: My-authentication-key 1 2 3 4 5 6 7 8 9 10 200 OK Content-Type: application/json [ { &#34;id&#34;:17, &#34;title&#34;: &#34;Lorem Ipsum dolor sit amet&#34;, &#34;content&#34;:&#34;le contenu du post&#34; } ] Les commentaires pour un Post GET /api/post/{id}.{format} AUTH-KEY: My-authentication-key 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 200 OK Content-Type: application/json { &#34;id&#34;:17, &#34;title&#34;: &#34;Lorem Ipsum dolor sit amet&#34;, &#34;content&#34;: &#34;le contenu du post&#34;, &#34;created_at&#34;:&#34;ISO8601&#34;, &#34;author&#34;:{ &#34;id&#34;:1, &#34;username&#34;:&#34;henri&#34; } &#34;comments&#34;: [ { &#34;id&#34;:173, &#34;content&#34;:&#34;le contenu du commentaire&#34;, &#34;created_at&#34;:&#34;ISO8601&#34;, &#34;author&#34;:{ &#34;id&#34;:1, &#34;username&#34;:&#34;henri&#34; } } ] }]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/php/php-101/","title":"PHP-101","body":"[PHP for beginners.]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/php/php-101/intro/","title":"Intro","body":"[PHP, c'est quoi ? 🐘 PHP (officiellement, ce sigle est un acronyme récursif pour PHP Hypertext Preprocessor) est un langage de scripts généraliste et Open Source, spécialement conçu pour le développement d'applications web. Il peut être intégré facilement au HTML. TOP ! mais... ça veut dire quoi 🤷 ? Un exemple : Exemple #1 Exemple d'introduction 1 2 3 4 5 6 7 8 9 10 11 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Exemple&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;?php echo &#34;Bonjour, je suis un script PHP !&#34;; ?&gt; &lt;/body&gt; &lt;/html&gt; Les pages PHP contiennent des fragments HTML dont du code qui fait &quot;quelque chose&quot; (dans ce cas, il va afficher &quot;Bonjour, je suis un script PHP !&quot;). Le code PHP est inclus entre une balise de début &lt;?php et une balise de fin ?&gt; qui permettent au serveur web de passer en mode PHP. Ce qui distingue PHP des langages de script comme le Javascript, est que le code est exécuté sur le serveur, générant ainsi le HTML, qui sera ensuite envoyé au client. Le client ne reçoit que le résultat du script, sans aucun moyen d'avoir accès au code qui a produit ce résultat. Vous pouvez configurer votre serveur web afin qu'il analyse tous vos fichiers HTML comme des fichiers PHP. Ainsi, il n'y a aucun moyen de distinguer les pages qui sont produites dynamiquement des pages statiques. Pourquoi apprendre PHP ? PHP est donc, d'après Internet, un langage en fin de vie . Alors pourquoi l'apprendre ? Aujourd'hui plus de 75% du web tourne sous PHP Qui l'utilise ? Facebook Wikipedia Baidu (Google chinois = 189M utilisateurs/jour) ... Un peu d'histoire PHP a été créé en 1994 👶 par Rasmus Lerdorf pour son site web. À l'époque, faire du web c'était utiliser du C pour générer de l'HTML. Rasmus voulait faire un langage simple pour faire un site web, basé sur le C. en 1995, il le rend Open-Source. Le projet grossit avec une gestion de la base de données. En 1998, sort PHP 3.0, Zeev Suraski et Andi Gutmans réécrivent entièrement la base du langage. En 1998 apparait également la mascotte php, l'Elephpant. En 2000 sort la version 4.0, avec le Zend Engine (Zeev &amp; Andi), Le moteur traite le code en deux temps : il analyse puis l'execute. En 2004 la version 5.0 de PHP avec un nouveau modèle objet. en même temps, le développement de PHP 6 commence, qui avait pour objectif d'ajouter le support unicode (pouvoir coder avec des emoji 🤷🏻‍♀️). Entre 2008 et 2012, Facebook développe sa propre version de PHP baptisée HackLang pour ajouter des fonctionnalités manquantes, et gagner en performances. En 2010, PHP 6 est totalement abandonné ⚰️ 🪦, car les performances de l'unicode ne sont pas au rendez-vous. PHP 5.6 sort en 2014, ce qui marque la dernière version 5 de PHP, avec des correctifs jusqu'en 2018. En 2015 sort PHP 7, avec une réécriture du système, et des performances incomparable avec les autres versions. Puis très rapidement : PHP 7.2 (2017) PHP 7.3 (2018) PHP 7.4 (novembre 2019) PHP 8.0 est sorti le 26 Novembre 2020. Ce cours sera basé sur cette version.]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/php/php-101/install/","title":"Installation et Prérequis","body":"[La seule chose qui sera requise pour cette partie du cours sera PHP 8 installé sur votre machine. Linux 🐧 Ubuntu (avec APT) Il faut dabord ajouter le PPA PHP de Ondrej Sury, le PPA le plus maintenu à jour avec PHP. sudo add-apt-repository ppa:ondrej/php sudo apt-get update Une fois les bibliothèques mises à jour, il ne reste plus qu'à installer php : sudo apt-get install php8.0-common php8.0-cli Mac OSX 🍏 Le plus simple pour installer PHP 8 sur Mac OSX est d'installer d'abord Homebrew. Une fois installé, lancez la commande dans le terminal : brew install php Windows 🤮 Via XAMPP (simple) XAMPP est une suite logicielle qui intègre Apache, MariaDB et PHP (et Perl). Cette solution intègre un Système de Gestion de Base de Données populaire (MariaDB), Un serveur Web (Apache) et l'executable PHP. Pour ce cours, il n'est pas nécessaire d'avoir toute la suite logicielle, il suffit juste d'avoir PHP, mais on peut gagner un peu de temps en installant MySQL avec. PHP seul (recommandé) 👍 Téléchargez l'archive ZIP de la version correspondant à votre système d'exploitation sur windows.php.net (très probablement la version PHP 8 x64 Thread Safe ici). Désarchivez le dossier à la racine de votre disque C:/ dans un dossier PHP. Le dossier C:/PHP doit contenir pleins de fichiers et notamment un fichier php.exe. Il faut ensuite mettre à jour la variable d'environnement PATH à jour : Dans Rechercher, lancez une recherche et sélectionnez : Système (Panneau de configuration) Cliquez sur le lien Paramètres système avancés. Cliquez sur Variables d'environnement. Dans la section Variables système recherchez la variable d'environnement PATH et sélectionnez-la. Cliquez sur Modifier. Si la variable d'environnement PATH n'existe pas, cliquez sur Nouvelle. Dans la fenêtre Modifier la variable système (ou Nouvelle variable système), indiquez la valeur de la variable d'environnement PATH vers C:/PHP. Cliquez sur OK. Fermez toutes les fenêtres restantes en cliquant sur OK. Via Chocolatey (OK-tier) 🍫 Installez Chocolatey puis lancez la commande d'installation du packet PHP suivante dans l'invite de commande: choco install php ENFIN.... Si tout se passe bien, ouvrez votre invite de commande/terminal et saisissez la commande suivante : php -v]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/php/php-101/basic_syntax/","title":"Basic Syntax","body":"[Scripts et Fichiers PHP Le PHP est un langage interprété comme le javascript. Lors de l'execution le code source est lu puis executé par l'interpréteur PHP. Aucun executable n'est produit donc seul le code source est distribué. La manière la plus simple d'executer du code PHP est de créer un fichier avec l'extension .php et de lancer la commande suivante : 1 php monScript.php la balise PHP s'utilise ainsi 1 2 3 4 &lt;?php // ICI tout votre code PHP. ?&gt; La balise fermante ?&gt; n'est pas obligatoire — voir à éviter — dans le cas où vous n'avez que du code PHP dans un fichier. Tout ce qui est en dehors de la balise est interprété comme du texte par l'interpréteur PHP et est affiché tel quel. Par exemple : 1 Bonjour &lt;?php echo &#34;le monde&#34;; ?&gt; magique affichera : 1 Bonjour le monde magique Chaque ligne d'instruction doit se terminer par un ;. Commentaires Il existe 3 types de Commentaires 1 2 3 4 5 6 7 8 9 10 &lt;?php # Je suis un commentaire mais plus personne ne m&#39;utilise // Je suis également un commentaire /* Je suis un commentaire sur plusieurs lignes pour apporter plus d&#39;informations */ Types, Variables et Operations Typage Le PHP est un langage faiblement typé. Un langage faiblement typé est un langage qui autorise les changements de type. Il existe neánmoins des types définis par le langage. Types simples (primitifs) Les différents types du langage sont les suivants : Type Description Valeurs possibles bool Un Bouléen true, false int Un entier -1203123, 0, 22, 39451829,... float ( ou double) Un nombre à virgule -7.4423124, -102.0, 0.0, 58.6,... string Une chaine de caractères &quot;bonjour&quot;, &quot;2.3&quot;, 'A', 'Banana for scale' NULL Une valeur vide null Les types complexes sont des types non-scalaires. Tableaux le type Array est utilisé pour manipuler des tableaux : ce type permet de stocker des valeurs ou des associations de valeurs. PHP étant un langage faiblement typé, on peut utiliser plusieurs types différents dans le même tableau. Voici plusieurs exemples de déclarations de tableaux : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // Tableaux indexés array(&#39;I&#39;,&#39;love&#39;,&#39;PHP&#39;,8); // Tableaux Associatifs array( &#39;username&#39; =&gt; &#34;Decima&#34;, &#39;identity&#39; =&gt; array( &#34;firstname&#34; =&gt; &#34;Henri&#34;, &#34;age&#34; =&gt; 29 ), ); // Tableau Indexés en syntaxe courte [ &#34;Henri&#34;, 123, -88.81, null ]; // Tableaux associatifs syntaxe courte [ &#34;firstname&#34; =&gt; &#34;Henri&#34;, &#34;friends&#34; =&gt; [&#34;Benjamin&#34;, &#34;Nadia&#34;,], &#34;drivingLicence&#34; =&gt; false, &#34;kids&#34; =&gt; [] ]; // des tableaux vides []; array(); La syntaxe [clé =&gt; valeur] est dite associative, tandis que la syntaxe [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;] est dite indexées. Chaque clé est unique. L'indexation va attribuer de manière implicite une séquence de clés du tableau de 0 à nombre d'éléments du tableau - 1. Par exemple on peut écrire de deux manières : 1 2 3 4 5 6 7 [ &#34;I&#34; , &#34;Love&#34; , &#34;PHP&#34; , 8.0 ] [ 0 =&gt; &#34;I&#34;, 1 =&gt; &#34;Love&#34;, 2 =&gt; &#34;PHP&#34;, 3 =&gt; 8.0 ] Variables Une variable est un symbole qui associe un nom à une valeur. Une variable PHP doit commencer par un $ et son nom peut contenir des chiffres, des lettres (majuscules ou minuscules) et le caractères _. Le nom d'une variable ne peut pas commencer par un chiffre. Voici un exemple de noms de variables : 1 2 3 4 5 6 7 8 $name $nameOfTheCurrentUser // syntaxe camelCase $name_of_the_current_user //syntaxe snakeCase $pass123 $GLOBALS $user1 $_GET $i La convention PHP la plus appliquée (PSR2) suggère de privilégier la syntaxe dite camelCase : 1 2 3 4 $firstname $userId $age $companyName mais d'autres en revenche suggèrent l'usage du snake_case (par exemple Wordpress). Pour ma part, je suggère vivement le camelCase. Assignation Pour assigner une valeur à une variable, il faut utiliser le symbole =. Par exemple : 1 2 3 4 5 6 7 $name = &#34;Henri&#34;; $age = 29; $children = null; $mark = 10.53; $anotherAge = $age; $isMyCourseInterresting=false; $friends = [&#34;Benjamin&#34;, &#34;Nadia&#34;]; De la même manière, il est possible de manipuler des tableaux : 1 2 3 4 $friends = array(&#34;Nadia&#34;); $addressBook = [ &#34;Nadia&#34; =&gt; [ &#34;phone&#34; =&gt; &#34;0147200001&#34; ] ]; Ajouter un élément à un index particulier du tableau ou à une clé : 1 2 $friends[1]=&#34;Benjamin&#34;; $addressBook[&#34;Benjamin&#34;] = [ &#34;phone&#34; =&gt; &#34;0123456789&#34; ]; Ou Ajouter automatiquement à la suite dans le tableau : 1 $friends[]=&#34;John&#34;; PHP, contrairement à beaucoup de langages est faiblement typé, ce qui permet d'effectuer les transformations suivantes : 1 2 3 4 $variable = &#34;Henri&#34;; $variable = 29; $variable = 8.0; $variable = null; Ce qui aura pour effet d'écraser la valeur précédente contenue dans la variable. Bien que cela soit possible, c'est FORTEMENT DÉCONSEILLÉ car cela fait perdre au code de sa visibilité. Déassignation Pour désasigner la variable, il faut la passer dans une fonction unset : 1 2 $username = &#34;Henri&#34;; unset($username); ou encore avec un tableau : 1 2 3 4 $friends = []; $friends = [&#34;Nadia&#34;,&#34;Benjamin&#34;,&#34;Dylan&#34;]; unset($friends[2]); // friends vaut alors [&#34;Nadia&#34;, &#34;Benjamin&#34;] Operations Voici la liste des opérations et un exemple de leur usages en fonction du type de variables. Arithmétiques Exemple Nom Résultat -$a Négation Opposé de $a. $a + $b Addition Somme de $a et $b. $a - $b Soustraction Différence de $a et $b. $a * $b Multiplication Produit de $a et $b. $a / $b Division Quotient de $a et $b. $a % $b Modulo Reste de $a divisé par $b. $a ** $b Exponentielle Résultat de l'élévation de $a à la puissance $b. Il n'est pas obligatoire d'utiliser des variables, on peut utiliser des valeurs directement ou combiner des valeurs et variables. L'odre des opérations s'effectue comme en Mathématiques et on peut ajouter également des parenthèses pour privilégier des calculs : 1 2 3 4 5 6 7 8 $a = 2; $b = 3; $c = 4; $a + $b; //vaut 5 $a * $b; //vaut 6 $a + $b * $c; // vaut 2 + 3 * 4 = 14 ($a + $b) * $c; // vaut (2 + 3) * 4 = 20 -($a + $b) * $c/2; // vaut -(2+3) * 4/2 = -10 C'est l'équivalent d'une fonction en mathématiques, on peut voir ça comme la fonction f(x) = 3x + 2 qui donnerait 3 * $x + 2 ou g(x) = x² + 3x - 2 qui donnerait $x**2 + 3 * $x - 2 Il existe des également des opérateurs d'assignation rapide : Exemple Equivalent Opération $a += $b $a = $a + $b Addition $a -= $b $a = $a - $b Soustraction $a *= $b $a = $a * $b Multiplication $a /= $b $a = $a / $b Division $a %= $b $a = $a % $b Modulo $a++ $a = $a + 1 Incrémentation $a-- $a = $a - 1 Décrémentation par exemple : 1 2 3 $a = 1; $a = $a + 2; $a = $a - 3; peut s'écrire : 1 2 3 $a = 1; $a += 2; $a -= 3; Fonctions Affichage Il existe plusieurs fonctions d'affichage en PHP, la plus utilisée est la fonction echo. Echo]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/","title":"Cours PHP/Systems/Symfony","body":"[Henri LARGET Welcome on my courses platform, proudly made with Hugo. This website is for 2020-2021 year, I'm working on a platform to be able to reference my courses every year. Useful links Decima@github]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/presentations/php/1/","title":"Hello","body":"[Usage Lorem ipsum dolor sit amet, consectetur adipiscing elit. In quis semper eros. Donec aliquet tincidunt tincidunt. In sollicitudin hendrerit rhoncus. Donec felis ex, sollicitudin vel odio sit amet, bibendum porttitor eros. Donec imperdiet, lectus ut fermentum pellentesque, ligula nibh lacinia purus, eget imperdiet ante tortor sit amet velit. Donec maximus felis nec velit mollis, et aliquam nulla pulvinar. Sed tincidunt enim ut neque varius porttitor. Aenean rhoncus, erat sed varius pellentesque, nunc nunc cursus eros, id mollis tortor ligula a ante. With Code 1 2 3 4 &lt;?php echo &#34;Hello&#34;; ?&gt; want more ? Bullet -- oh -- what -- background-image: url(https://images-eu.ssl-images-amazon.com/images/I/41g6jROgo0L.png) This is awesome! ??? Some note.]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/systems/systems-101/intro/","title":"Introduction","body":"[]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/php/","title":"PHP","body":"[WIP]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/presentations/php101/1-intro/","title":"PHP 101 - Introduction","body":"[Le PHP c'est quoi ? -- PHP est un langage de scripts généraliste et Open Source, spécialement conçu pour le développement d'applications web. Il peut être intégré facilement au HTML. -- 👏👏👏 Cool background-image: url(../thinking.gif) background-size: cover ? -- background-image: none 1 2 3 4 5 6 7 8 9 10 11 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Exemple&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;?php echo &#34;Bonjour, je suis un script PHP !&#34;; ?&gt; &lt;/body&gt; &lt;/html&gt; -- Les pages PHP Contiennent des fragments d'HTML et ce &lt;?php ?&gt; Quelque chose. Pourquoi apprendre le PHP ? -- Le PHP est un langage mort -- PHP est mort en 20** -- PHP n'existe que parce que Wordpress -- Les développeurs PHP sont sous-payés -- Le PHP est le 20ème sur 25 des langage aimés 2020 - source -- Donc pourquoi l'apprendre ? Qui utilise PHP ? -- 75% des sites du web sont en PHP. -- class: img-list Qui utilise PHP ? -- Un peu d'histoire -- PHP 👶 - 1994 -- PHP 3 🐘 - 1998 -- PHP 4 💩💩 - 2000 -- PHP 5 💩 - 2004 -- PHP 6 ⚰️ -- PHP 5.6 🌱 - 2014 -- PHP 7 🌳 - 2015 -- PHP 8 🚀 - novembre 2020 -- ![](../logo-elephpant.png)]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/presentations/","title":"Presentations","body":"[]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/search/","title":"Search","body":"[]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/dim/","title":"Symfony et PHP","body":"[Cours TP1 - Todo list TP2 - Mon framework TP3 - Blog Évaluation]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/systems/systems-101/","title":"SYS-101","body":"[]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/systems/","title":"Systems","body":"[]".toLowerCase(),},{"link":"http://0fd660284dee.ngrok.io/presentations/sys101/1-intro/","title":"Systems 101","body":"[Un système d'exploitation c'est quoi ? -- En informatique, un système d'exploitation (souvent appelé OS — de l'anglais Operating System) est un ensemble de programmes qui dirige l'utilisation des ressources d'un ordinateur par des logiciels applicatifs. -- Il reçoit les demandes d'utilisation des applications pour les ressources de l'ordinateur ressources de stockage (mémoire vive et disque durs) 💾 ressources de calcul du CPU 🧠 ressources de communications vers les périphériques 🖱️🖨️⌨️ ressources de réseau 🌍 class: img-margins Quels systèmes d'exploitations connaissez vous ? -- Windows -- Apple -- -- -- Autre ? -- -- -- -- -- -- -- -- -- -- -- -- -- ... Et beaucoup d'autres... Pourquoi ce cours ? -- Parce que vous allez travailler sur certains de ces systèmes 🧑‍💼 -- Parce que l'ouverture d'esprit, c'est bien 🧠 -- Parce que connaitre son outil, c'est savoir mieux l'utiliser 💡 Un peu d'histoire On retrace ensemble l'histoire des systèmes d'exploitation. 1948 L'arrivée du transistor Avec l'arrivée du transistor marque le début de l'informatique. Inventé en 1948 chez Bell Labs (Qui ?). Un Transistor c'est quoi ? -- C'est un interrupteur contrôlé électroniquement, sans partie mécanique 💡. -- Du coup, c'est cool, on commence à avoir des machines capables de faire quelque chose. -- Les premières machines lisent des cartes perforées et exécutent bêtement le programme. On est loins des Systèmes d'exploitation. 1960 et la limite des cartes perforées. Mais le problème : La loi de Moore. -- À la fin des années 50 on a des machines 8 fois plus puissantes. Les gens commencent à faire des systèmes capables de gérer plus de choses en même temps. Il faut des systèmes capables de faire une file d'attente des cartes à exécuter, et quelqu'un pour orchestrer tout ça : -- Le système d'exploitation -- Des premiers systèmes voient le jour, encore loin de là où nous sommes aujourd'hui. 1968 - Unix glory Cette année là, on voit la naissance d'un bébé chez Bell Labs AT&amp;T : Unix. Unix qu'est ce que c'est ? -- Unix est un système d'exploitation multitâche et multi-utilisateur. -- AT&amp;T n'ayant pas le droit de vendre autre chose que des équipements téléphoniques/télégraphiques, Bell labs décide de distribuer le code source de son système aux universités. -- -- C'est le noyau encore aujourd'hui de certains systèmes populaires 🍎.]".toLowerCase(),},];const searchKeys=['title','link','body','id'];const searchPageElement=elem('#searchpage');const searchOptions={ignoreLocation:true,findAllMatches:true,includeScore:true,shouldSort:true,keys:searchKeys,threshold:0.0};const index=new Fuse(idx,searchOptions);function minQueryLen(query){query=query.trim();const queryIsFloat=parseFloat(query);const minimumQueryLength=queryIsFloat?1:2;console.log(query,queryIsFloat,minimumQueryLength);return minimumQueryLength;}
function searchResults(results=[],query="",passive=false){let resultsFragment=new DocumentFragment();let showResults=elem('.search_results');if(passive){showResults=searchPageElement;}
emptyEl(showResults);const queryLen=query.length;const requiredQueryLen=minQueryLen(query);if(results.length&&queryLen>=requiredQueryLen){console.log('hmm');let resultsTitle=createEl('h3');resultsTitle.className='search_title';resultsTitle.innerText=quickLinks;if(passive){resultsTitle.innerText=searchResultsLabel;}
resultsFragment.appendChild(resultsTitle);if(!searchPageElement){results=results.slice(0,8);}else{results=results.slice(0,12);}
results.forEach(function(result){let item=createEl('a');item.href=`${result.link}?query=${query}`;item.className='search_result';item.style.order=result.score;if(passive){pushClass(item,'passive');let itemTitle=createEl('h3');itemTitle.textContent=result.title;item.appendChild(itemTitle);let itemDescription=createEl('p');let queryInstance=result.body.indexOf(query);itemDescription.textContent=`... ${result.body.substring(queryInstance,queryInstance+200)} ...`;item.appendChild(itemDescription);}else{item.textContent=result.title;}
resultsFragment.appendChild(item);});}
if(queryLen>=requiredQueryLen){if(!results.length){showResults.innerHTML=`<span class="search_result">${noMatchesFound}</span>`;}}else{if(queryLen>1){showResults.innerHTML=`<label for="find" class="search_result">${shortSearchQuery}</label>`;}else{showResults.innerHTML=`<label for="find" class="search_result">${typeToSearch}</label>`;}}
showResults.appendChild(resultsFragment);}
function search(searchTerm,passive=false){if(searchTerm.length){let rawResults=index.search(searchTerm);rawResults=rawResults.map(function(result){const score=result.score;const resultItem=result.item;resultItem.score=(parseFloat(score)*50).toFixed(0);return resultItem;});passive?searchResults(rawResults,searchTerm,true):searchResults(rawResults,searchTerm);}else{passive?searchResults([],"",true):searchResults();}}
function liveSearch(){const searchField=elem('.search_field');if(searchField){searchField.addEventListener('input',function(){const searchTerm=searchField.value.trim().toLowerCase();search(searchTerm);});if(!searchPageElement){searchField.addEventListener('search',function(){const searchTerm=searchField.value.trim().toLowerCase();if(searchTerm.length){window.location.href=`${parentURL}search/?query=${searchTerm}`;}});}}}
function findQuery(query='query'){const urlParams=new URLSearchParams(window.location.search);if(urlParams.has(query)){let c=urlParams.get(query);return c;}
return "";}
function passiveSearch(){if(searchPageElement){const searchTerm=findQuery();search(searchTerm,true);const searchField=elem('.search_field');if(searchField){searchField.addEventListener('input',function(){const searchTerm=searchField.value.trim().toLowerCase();search(searchTerm,true);wrapText(searchTerm,main);});}}}
function hasSearchResults(){const searchResults=elem('.results');const body=searchResults.innerHTML.length;return[searchResults,body]}
function clearSearchResults(){let searchResults=hasSearchResults();let actionable=searchResults[1];if(actionable){searchResults=searchResults[0];searchResults.innerHTML="";const searchField=elem('.search_field');searchField.value="";}}
function onEscape(fn){window.addEventListener('keydown',function(event){if(event.code==="Escape"){fn();}});}
let main=elem('main');if(!main){main=elem('.main');}
window.addEventListener('load',function(){searchPageElement?false:liveSearch();passiveSearch();wrapText(findQuery(),main);onEscape(clearSearchResults);});window.addEventListener('click',function(event){const target=event.target;const isSearch=target.closest('.search')||target.matches('.search');if(!isSearch&&!searchPageElement){clearSearchResults();}});